(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Utils = require("./Utils");
var Site_1 = require("./Site");

var API = function () {
    function API() {
        _classCallCheck(this, API);
    }

    _createClass(API, null, [{
        key: "bind",
        value: function bind(target) {
            var $target = $(typeof target !== 'undefined' ? target : 'body');
            $target.find('[data-api]').not('form').off('.api').on('click.api', API.onAction);
            $target.find('form[data-api]').off('.api').on('submit.api', API.onAction).attr('novalidate', 'novalidate');
        }
    }, {
        key: "callIt",
        value: function callIt(data, $el, customCallback) {
            data = API.preprocessData(data, $el);
            $el.addClass('is-doing-request');
            var action = data.action || 'POST';
            delete data.action;
            var url = data.url || window.location.pathname;
            delete data.url;
            $el.addClass('is-doing-request');
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: url,
                    global: false,
                    type: action,
                    dataType: 'json',
                    async: true,
                    data: data
                }).done(function (response) {
                    if (data.callback) {
                        API.onSuccess(data, $el, response);
                    }
                    if (customCallback && typeof customCallback === 'function') {
                        customCallback(data, $el, response);
                    }
                    resolve(response);
                }).fail(function (e) {
                    console.warn('API error: ' + e, data);
                    if (!!Site_1.debug) {
                        if (data.callback) {
                            API.onSuccess(data, $el, null);
                        }
                        if (customCallback && typeof customCallback === 'function') {
                            customCallback(data, $el, null);
                        }
                    }
                    reject(e);
                }).always(function () {
                    $el.removeClass('is-doing-request');
                });
            });
        }
    }, {
        key: "preprocessData",
        value: function preprocessData(data, $el) {
            if ($el.is('form')) {
                data.url = !data.url && $el.attr('action') ? $el.attr('action') : data.url;
                data = $.extend(data, $el.find(':input').serializeObject());
                console.log('data form', data, data.params, data.form, $el.find(':input'));
            }
            if ($el.is('[href]')) {
                data.url = !data.url && $el.attr('href') ? $el.attr('href') : data.url;
            }
            if (data.form && $(data.form)[0]) {
                data = $.extend(data, $(data.form).serializeObject());
                delete data.form;
            }
            if (data.params) {
                data = $.extend(data, data.params);
                delete data.params;
            }
            console.log('data pre', data, data.params);
            return data;
        }
    }]);

    return API;
}();

exports.API = API;
API.beforeCalls = {
    login: function login(data, $el) {
        if (!$body.hasClass('is-logged')) {
            $('.js-login').last().trigger('click');
            return;
        } else {
            API.callIt(data, $el);
        }
    },
    validate: function validate(data, $el) {
        var passed = true;
        var message = '';
        var $form = $el.is('form') ? $el : $el.closest('form');
        var $validationElem = $form;
        var stepValidation = void 0;
        var scrollTo = void 0;
        if ($form.hasClass('is-done')) {
            $form.removeClass('is-done');
            return;
        }
        $validationElem.find('.js-error').text('');
        $validationElem.find('[required]:input').each(function (index, input) {
            if (input.nodeName === 'INPUT') {
                switch (input.type) {
                    case 'email':
                        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        var value = input.value;
                        if (!re.test(value)) {
                            passed = false;
                            message = Utils.translations[value.length > 0 ? 'invalid-email' : 'required-field']['en'];
                            $(input).addClass('is-error');
                            $(input).nextAll('.js-error').text(message);
                        } else {
                            $(input).removeClass('is-error');
                        }
                        break;
                    case 'checkbox':
                        if (!input.checked) {
                            passed = false;
                            message = '';
                            message = !message ? Utils.translations['required-field']['en'] : message;
                            $(input).addClass('is-error');
                            $(input).nextAll('.js-error').text(message);
                        } else {
                            $(input).removeClass('is-error');
                        }
                        break;
                    case 'text':
                        var val = input.value;
                        if (val.length < 1) {
                            passed = false;
                            message = '';
                            message = !message ? Utils.translations['required-field']['en'] : message;
                            if ($(input).hasClass('js-postal')) {
                                message = Utils.translations['invalid-zip']['en'];
                            }
                            $(input).addClass('is-error');
                            $(input).nextAll('.js-error').text(message);
                        } else {
                            $(input).removeClass('is-error');
                        }
                        break;
                    case 'number':
                        break;
                    case 'phone':
                        var valTel = input.value;
                        if (valTel.length < 1) {
                            passed = false;
                            message = '';
                            message = !message ? Utils.translations['required-field']['en'] : message;
                            $(input).addClass('is-error');
                            $(input).nextAll('.js-error').text(message);
                        } else {
                            $(input).removeClass('is-error');
                        }
                        break;
                    default:
                        break;
                }
            }
            if (input.nodeName === 'TEXTAREA') {
                var _val = input.value;
                if (_val.length < 1) {
                    passed = false;
                    message = '';
                    message = !message ? Utils.translations['required-field']['en'] : message;
                    $(input).addClass('is-error');
                    $(input).nextAll('.js-error').text(message);
                } else {
                    $(input).removeClass('is-error');
                }
            }
        });
        $validationElem.find('input[name=zipcode]').each(function (index, input) {
            var val = input.value;
            if (val.length > 0) {
                if ($(input).hasClass('js-postal') && val.length != 5) {
                    passed = false;
                    message = '';
                    message = !message ? Utils.translations['invalid-zip']['en'] : message;
                    $(input).addClass('is-error');
                    $(input).nextAll('.js-error').text(message);
                }
            }
        });
        if (!!passed) {
            API.callIt(data, $form);
            $form.removeClass('has-errors');
            $validationElem.find('.js-error').text('');
        } else {
            $form.addClass('has-errors');
        }
    }
};
API.callbacks = {
    onCookiesClose: function onCookiesClose(data, $el, response) {
        $el.parent().addClass('is-hidden');
    },
    onSubscribe: function onSubscribe(data, $el, response) {
        console.log('onSubscribe');
        var $message = $el.find('.js-message');
        var scrollTo = void 0;
        $el.removeClass('is-error');
        if (!$message[0]) {
            $el.append('<div class="js-message message">');
            $message = $el.find('.js-message');
        }
        var html = $('<p>' + response.message + '</p>');
        $message.html('').append(html);
        if (response.result) {
            $el.addClass('is-completed');
            $el.parent().addClass('is-subscribed');
            $el.closest('.join').addClass('is-subscribed');
            $el.find('input').val('');
            $el.find('input:checked').removeAttr('checked');
            if ($el[0].hasAttribute('data-redirect')) {
                setTimeout(function () {
                    window.location.assign('/');
                }, 1500);
            }
        } else {
            $el.addClass('is-error');
        }
        $el.find('input').trigger('blur');
    }
};
API.onAction = function (e) {
    e.preventDefault();
    e.stopPropagation();
    var $el = $(e.currentTarget);
    var data = Object.assign({}, $(e.currentTarget).data('api'));
    console.log(data, 'data');
    if ($el.is('form')) {
        $el.addClass('is-submitted');
    } else {
        $el.closest('form').addClass('is-submitted');
    }
    if (data.beforeCall) {
        if (data.beforeCall in API.beforeCalls) {
            API.beforeCalls[data.beforeCall](data, $el);
            return;
        }
    }
    API.callIt(data, $el);
};
API.onSuccess = function (data, $el, response) {
    if (data.callback) {
        if (data.callback in API.callbacks) {
            API.callbacks[data.callback](data, $el, response);
        }
    }
};

},{"./Site":11,"./Utils":12}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Breakpoint = function () {
    function Breakpoint() {
        _classCallCheck(this, Breakpoint);
    }

    _createClass(Breakpoint, null, [{
        key: "update",
        value: function update() {
            var cssBefore = window.getComputedStyle(document.querySelector('body'), ':before');
            var cssBeforeValue = cssBefore.getPropertyValue('content').replace(/[\"\']/g, '');
            exports.breakpoint = {
                desktop: cssBeforeValue === 'desktop',
                phone: cssBeforeValue === 'phone',
                tablet: cssBeforeValue === 'tablet',
                value: cssBeforeValue
            };
            console.log("BP:", exports.breakpoint.value);
        }
    }]);

    return Breakpoint;
}();

exports.Breakpoint = Breakpoint;

},{}],3:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
function getBrowser() {
    var ua = window.navigator.userAgent;
    exports.browser = {
        mobile: /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(ua.substr(0, 4)) ? true : false,
        ios: /iPad|iPhone|iPod/.test(ua),
        mac: navigator.platform.toUpperCase().indexOf('MAC') >= 0,
        ie: ua.indexOf('MSIE ') > 0 || !!ua.match(/Trident.*rv\:11\./),
        opera: !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0,
        firefox: ua.toLowerCase().indexOf('firefox') > -1,
        safari: /^((?!chrome|android).)*safari/i.test(ua),
        windows: window.navigator.platform.toLowerCase().indexOf('win') > -1
    };
    $('html').toggleClass('mac', !exports.browser.windows && (exports.browser.ios || exports.browser.mac)).toggleClass('windows', exports.browser.windows && !exports.browser.mac && !exports.browser.ios).toggleClass('mobile', exports.browser.mobile).toggleClass('firefox', exports.browser.firefox).toggleClass('safari', exports.browser.safari).toggleClass('ie', exports.browser.ie);
    return exports.browser;
}
exports.getBrowser = getBrowser;

var Browser = function () {
    function Browser() {
        _classCallCheck(this, Browser);
    }

    _createClass(Browser, null, [{
        key: "update",
        value: function update() {
            exports.browser = getBrowser();
        }
    }]);

    return Browser;
}();

exports.Browser = Browser;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Slider_1 = require("./components/Slider");
var Tooltip_1 = require("./components/Tooltip");
var Dropdown_1 = require("./components/Dropdown");
var Filters_1 = require("./components/Filters");
var Dashboard_1 = require("./components/Dashboard");
var Stats_1 = require("./components/Stats");
var Masonry_1 = require("./components/Masonry");
var Range_1 = require("./components/Range");
var Chart_1 = require("./components/Chart");
var Aside_1 = require("./components/Aside");
var Page_1 = require("./pages/Page");
exports.components = {
    Slider: Slider_1.Slider,
    Tooltip: Tooltip_1.Tooltip,
    Dropdown: Dropdown_1.Dropdown,
    Filters: Filters_1.Filters,
    Dashboard: Dashboard_1.Dashboard,
    Stats: Stats_1.Stats,
    Masonry: Masonry_1.Masonry,
    Range: Range_1.Range,
    Chart: Chart_1.Chart,
    Aside: Aside_1.Aside
};
exports.pages = {
    Page: Page_1.Page
};

},{"./components/Aside":13,"./components/Chart":14,"./components/Dashboard":16,"./components/Dropdown":17,"./components/Filters":18,"./components/Masonry":19,"./components/Range":20,"./components/Slider":21,"./components/Stats":22,"./components/Tooltip":24,"./pages/Page":25}],5:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Copy = function () {
    function Copy() {
        _classCallCheck(this, Copy);

        this.bind();
    }

    _createClass(Copy, [{
        key: "bind",
        value: function bind() {
            $('[data-copy]').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var $el = $(e.currentTarget);
                var url = window.location.origin + window.location.pathname;
                window.Clipboard.copy(url);
                window.console.info('"%s" copied', url);
                $el.addClass('is-copied');
                setTimeout(function () {
                    $el.removeClass('is-copied');
                }, 1000);
            });
        }
    }]);

    return Copy;
}();

exports.Copy = Copy;

},{}],6:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Handler = function () {
    function Handler() {
        _classCallCheck(this, Handler);

        this.events = {};
    }

    _createClass(Handler, [{
        key: "on",
        value: function on(eventName, handler) {
            if (!this.events[eventName]) {
                this.events[eventName] = [];
            }
            this.events[eventName].push(handler);
            return this;
        }
    }, {
        key: "off",
        value: function off(eventName, handler) {
            if (typeof eventName === 'undefined') {
                this.events = {};
                return this;
            }
            if (typeof handler === 'undefined' && this.events[eventName]) {
                this.events[eventName] = [];
                return this;
            }
            if (!this.events[eventName]) {
                return this;
            }
            var index = this.events[eventName].indexOf(handler);
            if (index > -1) {
                this.events[eventName].splice(index, 1);
            }
            return this;
        }
    }, {
        key: "trigger",
        value: function trigger(eventName) {
            var _this = this;

            for (var _len = arguments.length, extraParameters = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                extraParameters[_key - 1] = arguments[_key];
            }

            if (!this.events[eventName]) {
                return;
            }
            var args = arguments;
            this.events[eventName].forEach(function (event) {
                return event.apply(_this, [].slice.call(args, 1));
            });
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.events = {};
        }
    }]);

    return Handler;
}();

exports.Handler = Handler;

},{}],7:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Loader = function () {
    function Loader(view) {
        _classCallCheck(this, Loader);

        this.view = view;
        this.width = window.innerWidth;
        this.progress = 0;
    }

    _createClass(Loader, [{
        key: "show",
        value: function show() {
            gsap.to(this.view, { y: 0, duration: 0.2 });
        }
    }, {
        key: "hide",
        value: function hide() {
            gsap.killTweensOf(this.view, ['width']);
            gsap.to(this.view, { duration: 0.5, y: 10, width: this.width || '100%' });
        }
    }, {
        key: "set",
        value: function set(progress) {
            this.progress = progress;
            gsap.killTweensOf(this.view, ['y']);
            var width = this.width * progress;
            gsap.killTweensOf(this.view, ['width']);
            gsap.to(this.view, { duration: 0.3, width: width });
        }
    }, {
        key: "resize",
        value: function resize(wdt, hgt) {
            this.width = wdt;
        }
    }]);

    return Loader;
}();

exports.Loader = Loader;

},{}],8:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Handler_1 = require("./Handler");
var Scroll_1 = require("./Scroll");
var Site_1 = require("./Site");
var Utils = require("./Utils");
var Historyjs = History;

var PushStatesEvents = function PushStatesEvents() {
    _classCallCheck(this, PushStatesEvents);
};

exports.PushStatesEvents = PushStatesEvents;
PushStatesEvents.CHANGE = 'state';
PushStatesEvents.PROGRESS = 'progress';

var PushStates = function (_Handler_1$Handler) {
    _inherits(PushStates, _Handler_1$Handler);

    function PushStates() {
        _classCallCheck(this, PushStates);

        var _this = _possibleConstructorReturn(this, (PushStates.__proto__ || Object.getPrototypeOf(PushStates)).call(this));

        _this.onLanguageClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var lang = $(e.currentTarget).data('lang');
            var alternate = $('[data-alternate]').data('alternate');
            var articleURL = alternate ? alternate[lang || Object.keys(alternate)[0]] : null;
            var headLink = $('link[rel="alternate"][hreflang]')[0];
            var headURL = headLink ? headLink.href : null;
            window.location.assign(articleURL || headURL || e.currentTarget.href);
        };
        _this.onClick = function (e) {
            e.preventDefault();
            var $self = $(e.currentTarget),
                state = $self.attr('href').replace('http://' + window.location.host, ''),
                type = $self.attr('data-history');
            if (type === 'back') {
                PushStates.back(state);
            } else if (type === 'replace') {
                Historyjs.replaceState({ randomData: Math.random() }, document.title, state);
            } else {
                Scroll_1.Scroll.resetScrollCache(state);
                Historyjs.pushState({ randomData: Math.random() }, document.title, state);
            }
        };
        _this.onHashClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('click link');
            Scroll_1.Scroll.scrollToElement($(e.currentTarget.hash));
        };
        _this.onState = function () {
            _this.setActiveLinks();
            PushStates.setNavbarVisibility();
            if (!PushStates.noChange) {
                _this.trigger(PushStatesEvents.CHANGE);
            }
        };
        if (Historyjs) {
            _this.bindLinks();
            Historyjs.Adapter.bind(window, 'statechange', _this.onState);
        }
        PushStates.instance = _this;
        _this.setActiveLinks();
        return _this;
    }

    _createClass(PushStates, [{
        key: "load",
        value: function load() {
            var _this2 = this;

            if (this.request) {
                this.request.abort();
            }
            var path = window.location.pathname;
            var search = window.location.search || '';
            var url = path + search;
            window.clearTimeout(this.timeout);
            this.timeout = setTimeout(function () {
                if (_this2.request) {
                    window.location.reload();
                }
            }, PushStates.TIME_LIMIT);
            return new Promise(function (resolve, reject) {
                _this2.request = new XMLHttpRequest();
                _this2.request.open('GET', url);
                _this2.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                _this2.request.onload = function () {
                    if (_this2.request.status === 200) {
                        _this2.loadedData = _this2.request.responseText;
                        _this2.trigger(PushStatesEvents.PROGRESS, 1);
                        resolve();
                    } else {
                        reject(Error(_this2.request.statusText));
                        if (_this2.request.statusText !== 'abort') {
                            window.location.reload();
                        }
                    }
                    _this2.request = null;
                    window.clearTimeout(_this2.timeout);
                };
                _this2.request.onerror = function () {
                    reject(Error('Network Error'));
                    window.clearTimeout(_this2.timeout);
                    _this2.request = null;
                };
                _this2.request.onprogress = function (e) {
                    if (e.lengthComputable) {
                        _this2.trigger(PushStatesEvents.PROGRESS, e.loaded / e.total);
                    }
                };
                _this2.request.send();
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var data = this.loadedData.trim();
            var containers = $('.js-replace[id], #main').toArray();
            var renderedCount = 0;
            if (containers.length > 0) {
                containers.forEach(function (container, index) {
                    renderedCount += _this3.renderElement(container, data, index === 0 && containers.length === 1) ? 1 : 0;
                });
            }
            if (renderedCount === 0 && containers.length > 0) {
                this.renderElement($('#main')[0], data, true);
            }
            this.bindLinks();
            this.setActiveLinks();
            window.document.dispatchEvent(new Event('ajax_loaded'));
        }
    }, {
        key: "renderElement",
        value: function renderElement(el, data, forcePlain) {
            var code = null;
            var container = '#' + el.id;
            if (!!forcePlain && data.indexOf('<article') === 0 && el.id === 'article-main') {
                code = data;
            } else {
                var $loadedContent = $($(data).find(container)[0] || $(data).filter(container)[0]);
                code = $loadedContent.html();
            }
            if (!code) {
                console.info("Couldn't rerender #" + el.id + " element");
                return false;
            }
            $(container).hide().empty().html(code || data).show();
            return true;
        }
    }, {
        key: "bindLink",
        value: function bindLink(target) {
            $(target).off('click').on('click.history', this.onClick);
        }
    }, {
        key: "bindLinks",
        value: function bindLinks(target) {
            target = target || 'body';
            $(target).find('a').not('[data-history="false"]').not('[data-api]').not('[download]').not('[data-modal]').not('[href^="#"]').not('[href$=".jpg"]').not('[target="_blank"]').not('[href^="mailto:"]').not('[href^="tel:"]').not('[data-poczta]').not('[data-login]').not('[data-lang]').not('[data-scroll-to]').off('.history').on('click.history', this.onClick);
            $(target).find('a[href^="http"]').not('[href^="http://' + window.location.host + '"]').off('.history');
            $(target).find('a[href^="#"]').not('[href="#"]').off('.history').on('click.history', this.onHashClick);
            $('[data-hamburger]').on('click', PushStates.asideToggle);
        }
    }, {
        key: "setActiveLinks",
        value: function setActiveLinks() {
            $('a[href]').removeClass('is-active');
            $('a[href="' + window.location.pathname + '"]').addClass('is-active');
        }
    }], [{
        key: "setTitle",
        value: function setTitle(title) {
            document.title = title || $('#main > [data-title]').data('title');
        }
    }, {
        key: "goTo",
        value: function goTo(location, replace) {
            var pathname = location.replace(window.location.protocol + window.location.host, ''),
                isDifferent = pathname !== window.location.pathname;
            if (Modernizr.history) {
                if (!!replace) {
                    Historyjs.replaceState({ randomData: Math.random() }, document.title, pathname);
                } else {
                    Historyjs.pushState({ randomData: Math.random() }, document.title, pathname);
                }
            } else {
                window.location.replace(location);
            }
            return isDifferent;
        }
    }, {
        key: "changePath",
        value: function changePath(location, replace, title) {
            PushStates.noChange = true;
            var changed = PushStates.goTo(location, replace || true);
            PushStates.noChange = false;
            if (!!changed) {
                PushStates.setTitle(title || document.title);
            }
        }
    }, {
        key: "bind",
        value: function bind(target, elementItself) {
            if (!elementItself) {
                PushStates.instance.bindLinks(target);
            } else {
                PushStates.instance.bindLink(target);
            }
        }
    }, {
        key: "back",
        value: function back(url) {
            if (history.length > 2) {
                Historyjs.back();
            } else if (url) {
                Historyjs.replaceState({ randomData: Math.random() }, document.title, url);
            } else {
                Historyjs.replaceState({ randomData: Math.random() }, document.title, '/');
            }
        }
    }, {
        key: "reload",
        value: function reload() {
            PushStates.instance.trigger(PushStatesEvents.CHANGE);
        }
    }, {
        key: "setNavbarVisibility",
        value: function setNavbarVisibility() {
            if (!Site_1.$pageHeader) {
                $('html').addClass('is-animated');
                Site_1.$body.addClass('navbar-always-shown');
            }
        }
    }]);

    return PushStates;
}(Handler_1.Handler);

exports.PushStates = PushStates;
PushStates.TIME_LIMIT = 5000;
PushStates.noChange = false;
PushStates.asideToggle = function (e) {
    var el = $(e.currentTarget);
    el.toggleClass('is-open');
    Site_1.$body.toggleClass('is-aside-open');
    if (el.hasClass('is-open')) {
        gsap.set(Site_1.$article, { 'will-change': 'transform' });
        Utils.disableBodyScrolling(Scroll_1.Scroll.scrollTop);
    } else {
        gsap.set(Site_1.$article, { clearProps: 'will-change' });
        Utils.enableBodyScrolling(Scroll_1.Scroll.scrollTop);
    }
    return;
};

},{"./Handler":6,"./Scroll":9,"./Site":11,"./Utils":12}],9:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Browser_1 = require("./Browser");
var Breakpoint_1 = require("./Breakpoint");
var Site_1 = require("./Site");
var Classes_1 = require("./Classes");

var Scroll = function () {
    function Scroll() {
        var _this = this;

        _classCallCheck(this, Scroll);

        this.cache = {};
        this.scrollCache = {};
        this.onHashClickHandler = function (e) {
            e.preventDefault();
            if ($(e.target).attr('data-offset')) {
                var offset = parseInt($(e.target).attr('data-offset'), 10);
                if (typeof $(e.target).attr('data-offset') === 'string') {
                    var off = $(e.target).attr('data-offset').replace('vh', '');
                    offset = $(window).height() * (parseInt(off, 10) / 100);
                }
                Scroll.scrollToElement($(e.currentTarget.hash), offset);
            } else {
                Scroll.scrollToElement($(e.currentTarget.hash));
            }
        };
        this.onScroll = function () {
            if (Scroll.disabled || Site_1.$body.hasClass('is-aside-open')) {
                return;
            }
            var sT = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            var windowHeight = Scroll.windowHeight;
            var screenCenter = sT + Scroll.windowHeight * 0.33;
            var headerHeight = Scroll.headerHeight;
            var scrollend = $('#main').outerHeight() - window.innerHeight - 2;
            var pageHeader = $('#page-header').length > 0 ? $('#page-header').offset().top - Scroll.headerHeight * 2 : 0;
            var backgrounds = $('#page-header').length > 0 ? $('#page-header').offset().top - Scroll.headerHeight : 0;
            Scroll.scrollTop = sT;
            _this.scrollCache[window.location.pathname] = sT;
            Site_1.$body.toggleClass('is-scrolled-window-height', sT > windowHeight - 100);
            Site_1.$body.toggleClass('is-scrolled-navbar', sT > 100);
            Site_1.$body.toggleClass('is-scrolled', sT > 0);
            Site_1.$body.toggleClass('is-trailer-scrolled', sT > pageHeader);
            Site_1.$body.toggleClass('is-backgrounds-scrolled', sT > backgrounds);
            Site_1.$body.toggleClass('is-scroll-end', sT >= scrollend);
            if (_this.cache.animations && _this.cache.animations.length > 0) {
                for (var i = 0; i < _this.cache.animations.length; i++) {
                    var item = _this.cache.animations[i];
                    var yBottom = sT + (1 - item.start) * windowHeight;
                    var yTop = sT;
                    var itemY = !_this.ignoreCache ? item.y : item.$el.offset().top;
                    var itemHeight = !_this.ignoreCache ? item.height : item.$el.height();
                    if (!item.done && itemY <= yBottom && itemY + itemHeight >= sT) {
                        item.$el.addClass('animated');
                        item.done = true;
                        var quick = yTop >= itemY + itemHeight;
                        _this.animate(item, item.$el, item.type, item.delay, quick);
                    } else if (!!item.done && item.component && item.type === 'toggle' && (itemY > yBottom || itemY + itemHeight < yTop)) {
                        if (typeof item.component['disable'] === 'function') {
                            item.component['disable']();
                        }
                        item.done = false;
                    } else if (item.uncache && item.done && (sT <= itemY - windowHeight || sT >= itemY + windowHeight)) {
                        item.done = false;
                        if (item.$el.find('.uncached').length > 0) {
                            item.$el.find('.uncached').removeAttr('style');
                        }
                        if (item.$el.attr('data-uncache')) {
                            item.$el.removeAttr('style');
                        }
                        item.$el.removeClass('animated');
                    }
                }
            }
            if (_this.cache.parallaxes && _this.cache.parallaxes.length > 0 && Breakpoint_1.breakpoint.desktop) {
                for (var _i = 0; _i < _this.cache.parallaxes.length; _i++) {
                    _this.parallax(_this.cache.parallaxes[_i], sT, windowHeight, -headerHeight);
                }
            }
            if (_this.cache.backgrounds) {
                var windowCenter = 0.5 * windowHeight;
                var bgsToShow = [];
                var bgsToHide = [];
                _this.cache.backgrounds.forEach(function (item, index) {
                    var itemY = !_this.ignoreCache ? item.y : item.$el.offset().top;
                    var itemHeight = !_this.ignoreCache ? item.height : item.$el.outerHeight();
                    var itemBottom = itemY + itemHeight;
                    var yCenter = typeof item.start !== 'undefined' ? sT + item.start * windowHeight : windowCenter;
                    var background = _this.backgrounds[item.id];
                    var delay = typeof item.delay !== 'undefined' ? item.delay : 0.1;
                    var percentage = -(itemY - yCenter) / itemHeight;
                    var backgroundQuickSetup = false;
                    var current = Site_1.$body.hasClass('is-trailer-scrolled') ? sT + windowHeight >= itemY && itemY + itemHeight >= sT : itemY - sT <= windowCenter && itemBottom - sT >= windowCenter;
                    if (_this.cache.backgrounds.length === 1) {
                        item.shown = true;
                        if (!background.shown) {
                            background.animationIn(false, 2);
                        }
                        backgroundQuickSetup = true;
                        return;
                    }
                    if (current) {
                        if (!item.shown) {
                            item.shown = true;
                            if (!background.shown) {
                                background.animationIn(false, delay);
                            }
                            backgroundQuickSetup = true;
                        }
                        background.update(percentage);
                        background.setStep(item.step, backgroundQuickSetup);
                        if (item.darken) {
                            background.darken(itemY <= yCenter - windowHeight * item.darkenDelay);
                        }
                        bgsToShow.push(item.id);
                    } else if (!!item.shown) {
                        bgsToHide.push(item.id);
                        item.shown = false;
                    }
                });
                if (bgsToHide.length) {
                    bgsToHide.forEach(function (bgID) {
                        if (bgsToShow.indexOf(bgID) < 0) {
                            _this.backgrounds[bgID].animationOut(false);
                        }
                    });
                }
            }
        };
        this.ignoreCache = !!Browser_1.browser.safari;
        $(window).on('scroll', this.onScroll);
        $('a[href^="#"]:not(".js-nav-item, [data-lightbox]")').on('click', this.onHashClickHandler);
        this.backgrounds = this.buildBackgrounds();
        Scroll.headerHeight = 70;
        Scroll.instance = this;
        this.storedPath = window.location.pathname;
        this.target = $('[data-path="' + window.location.pathname + '"]');
        this.sections = $('[data-scroll]');
    }

    _createClass(Scroll, [{
        key: "resize",
        value: function resize() {
            Scroll.windowHeight = window.innerHeight;
            Scroll.headerHeight = $('#navbar').height();
            Scroll.maxScroll = $('#main').outerHeight() - Scroll.windowHeight + Scroll.headerHeight;
            this.backgrounds = this.buildBackgrounds();
            this.saveCache();
        }
    }, {
        key: "onState",
        value: function onState() {
            if (!!this.changingPath) {
                return false;
            }
            return Scroll.scrollToPath();
        }
    }, {
        key: "stop",
        value: function stop() {
            Scroll.disable();
        }
    }, {
        key: "load",
        value: function load() {
            var _this2 = this;

            this.sections = $('[data-scroll]');
            this.saveCache();
            Site_1.$window.off('.scrolling').on('scroll.scrolling', function () {
                return _this2.onScroll();
            });
        }
    }, {
        key: "start",
        value: function start() {
            Scroll.enable();
            Scroll.instance.onScroll();
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.cache = {};
            Site_1.$window.off('.scrolling');
        }
    }, {
        key: "buildBackgrounds",
        value: function buildBackgrounds() {
            var bgs = {};
            $('[data-bg-component]').toArray().forEach(function (el, i) {
                var $bgEl = $(el);
                var bgName = $bgEl.data('bg-component');
                var bgOptions = $bgEl.data('options');
                if (typeof Classes_1.components[bgName] !== 'undefined') {
                    var bg = new Classes_1.components[bgName]($bgEl, bgOptions);
                    bg.id = el.id;
                    bgs[el.id] = bg;
                } else {
                    window.console.warn('There is no "%s" component available!', bgName);
                }
            });
            return bgs;
        }
    }, {
        key: "saveCache",
        value: function saveCache() {
            var _this3 = this;

            var animations = [];
            var margin = 0;
            $('[data-animation]').each(function (i, el) {
                var $el = $(el);
                animations.push({
                    $el: $el,
                    start: typeof $el.data('start') !== 'undefined' ? $el.data('start') : 0.1,
                    y: $el.offset().top - margin,
                    height: $el.outerHeight(),
                    done: $el.hasClass('animated'),
                    type: $el.data('animation'),
                    delay: $el.data('delay') || null,
                    uncache: $el.data('uncache')
                });
            });
            var parallaxes = [];
            $('[data-parallax]').each(function (i, el) {
                var $el = $(el);
                var p = $el.data('parallax');
                parallaxes.push({
                    $el: $el,
                    start: 0,
                    y: $el.offset().top,
                    height: $el.outerHeight(),
                    type: typeof p === 'string' ? p : null,
                    shift: typeof p === 'number' ? p : null,
                    done: false,
                    $child: $el.children().first(),
                    childHeight: $el.children().first().height()
                });
            });
            var backgrounds = [];
            $('[data-background]').each(function (i, el) {
                var $el = $(el);
                var backgroundData = $el.data('background');
                var breakpoints = backgroundData.breakpoints || ['desktop', 'tablet', 'phone'];
                if (breakpoints.indexOf(Breakpoint_1.breakpoint.value) >= 0) {
                    if (!_this3.backgrounds[backgroundData.id]) {
                        console.warn('there\'s no background with id=' + backgroundData.id + '!');
                    } else {
                        backgrounds.push($.extend({
                            $el: $el,
                            y: $el.offset().top,
                            height: $el.outerHeight(),
                            start: 1,
                            index: i,
                            darkenDelay: 0
                        }, backgroundData || {}));
                    }
                }
            });
            this.cache.animations = animations;
            this.cache.parallaxes = parallaxes;
            this.cache.backgrounds = backgrounds;
            this.onScroll();
        }
    }, {
        key: "animate",
        value: function animate(data, $el, type) {
            var delay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.1;
            var quick = arguments[4];
            var uncache = arguments[5];

            var time = !quick ? .6 : 0;
            switch (type) {
                case 'fade':
                    gsap.killTweensOf($el, { opacity: true });
                    gsap.fromTo($el, { opacity: 0 }, { duration: time, opacity: 1, ease: 'sine', delay: delay });
                    break;
                case 'fadeUp':
                    gsap.killTweensOf($el, { opacity: true, y: true });
                    gsap.fromTo($el, { opacity: 0, y: 40 }, { duration: time, opacity: 1, y: 0, ease: 'sine', delay: delay });
                    break;
                case 'fadeDown':
                    gsap.killTweensOf($el, { opacity: true, y: true });
                    gsap.fromTo($el, { opacity: 0, y: -10 }, { duration: time, opacity: 1, y: 0, ease: 'sine', delay: delay });
                    break;
                case 'fadeRight':
                    gsap.killTweensOf($el, { opacity: true, x: true });
                    gsap.fromTo($el, { opacity: 0, x: -10 }, { duration: time, opacity: 1, x: 0, ease: 'sine', delay: delay });
                    break;
                case 'fadeLeft':
                    gsap.killTweensOf($el, { opacity: true, x: true });
                    gsap.fromTo($el, { opacity: 0, x: 10 }, { duration: time, opacity: 1, x: 0, ease: 'sine', delay: delay });
                    break;
                case 'iTabs':
                    gsap.set($el, { opacity: 1 });
                    var lText = $el.find('span:first-child');
                    var rText = $el.find('span:last-child');
                    gsap.fromTo(lText, { duration: 0.5, x: '50%', opacity: 0 }, { x: '0%', opacity: 1 });
                    gsap.fromTo(rText, { duration: 0.5, x: '-50%', opacity: 0 }, { x: '0%', opacity: 1 });
                    break;
                case 'elements':
                    gsap.set($el, { opacity: 1 });
                    gsap.fromTo($el.find('[data-view-tab]'), { duration: 1, y: '100%' }, {
                        y: '0%', stagger: 0.2,
                        onComplete: function onComplete() {
                            gsap.to($el.find('.item__tabs'), { duration: 1, overflow: 'unset' });
                        }
                    });
                    break;
                case 'fact':
                    gsap.set($el, { opacity: 1 });
                    var fText = $el.find('.fact__text span'),
                        splitFTxt = new SplitText(fText, { type: 'words, chars' }),
                        fImg = $el.find('.fact__image-wrap'),
                        fArr = $el.find('.fact__icon');
                    gsap.timeline().fromTo(fArr, { duration: 1, rotate: 90 }, { rotate: 0, delay: 0.5 }).fromTo(splitFTxt.chars, { duration: 1, opacity: 0, x: -5 }, { x: 0, opacity: 1, stagger: 0.01 }, '-=0.8').fromTo(fImg, { duration: 1, opacity: 0, scale: 0.95 }, { opacity: 1, scale: 1 }, '-=0.5');
                    break;
                case 'lead':
                    gsap.set($el, { opacity: 1 });
                    var split = new SplitText($el.children(), { type: 'words, lines', linesClass: 'line' });
                    var lines = $el.find('.line');
                    for (var i = 0; i < lines.length; i++) {
                        $(lines[i]).after('<br>');
                        $(lines[i]).append('<span class="line__bg"></span>');
                    }
                    gsap.fromTo(split.words, { duration: 1, opacity: 0 }, { opacity: 1, stagger: 0.1, delay: 0.4 });
                    gsap.to($el.find('.line__bg'), { duration: 0.75, scaleX: 1, stagger: 0.1 });
                    break;
                case 'scale':
                    gsap.fromTo($el, { duration: 1, scaleX: 0 }, { scaleX: 1, opacity: 1, delay: delay });
                    break;
                case 'chars':
                    gsap.set($el, { opacity: 1 });
                    var splitH = new SplitText($el.children(), { type: 'words, chars' });
                    gsap.fromTo(splitH.chars, { duration: 1, scaleX: 0, opacity: 0 }, { scaleX: 1, opacity: 1, stagger: 0.05 });
                    break;
                case 'chars-simple':
                    gsap.set($el, { opacity: 1 });
                    var splitH2 = new SplitText($el.children(), { type: 'words, chars' });
                    gsap.fromTo(splitH2.chars, { duration: 1, opacity: 0 }, { opacity: 1, stagger: 0.05 });
                    break;
                case 'words-simple':
                    gsap.set($el, { opacity: 1 });
                    var words = new SplitText($el.children(), { type: 'words' });
                    var stagger = $el.data('stagger') ? $el.data('stagger') : 0.2;
                    gsap.fromTo(words.words, { duration: 1, opacity: 0 }, { opacity: 1, stagger: stagger });
                    break;
                case 'images':
                    gsap.set($el, { opacity: 1 });
                    gsap.fromTo($el.find('img'), { duration: 1, opacity: 0, scale: 0.95 }, { opacity: 1, scale: 1, stagger: 0.2 });
                    break;
                case 'hero':
                    gsap.to($el, { duration: 1, opacity: 1, pointerEvents: 'none', delay: 0.5 });
                    var heroElements = $el.find('.hero-image:not(.js-tiny)');
                    var tiny = $el.find('.js-tiny');
                    gsap.from(tiny, { duration: 1.5, opacity: 0, stagger: -0.05, delay: 0.5 });
                    gsap.from(heroElements, {
                        duration: 1.5, x: '-50%', y: '50%', stagger: -0.05,
                        onComplete: function onComplete() {
                            gsap.set($el, { pointerEvents: 'all' });
                        }
                    });
                    break;
                case 'quote':
                    var $quote = $el.find('.js-quote-words');
                    var $author = $el.find('.js-quote-author');
                    var $line = $el.find('hr');
                    gsap.set([$quote, $el, $author], { opacity: 1 });
                    var child = $quote.children();
                    var splitQuote = new SplitText($quote, { type: 'words' });
                    gsap.timeline({
                        autoRemoveChildren: true
                    }).set($quote, { opacity: 1 }).fromTo(child, 0.5, { opacity: 0 }, { opacity: 1, ease: 'power3' }, '+=' + delay).from(splitQuote.words, 0.5, { opacity: 0, x: 8, transformOrigin: '0% 100%', ease: 'power3', stagger: 0.05 }, 0.1).fromTo($author, 0.7, { opacity: 0, x: -10 }, { opacity: 1, x: 0 }, '-=' + 0.3).fromTo($line, { duration: 0.7, scaleX: 0 }, { scaleX: 1 }, '-=0.3');
                    break;
                case 'join':
                    gsap.set($el, { opacity: 1 });
                    var txt = $el.find('.js-lead');
                    var splittxt = new SplitText(txt, { type: 'words, chars' });
                    gsap.fromTo(splittxt.chars, { duration: 1, opacity: 0 }, { opacity: 1, stagger: 0.05 });
                    break;
                case 'itemsFade':
                    var elements = $el.find('.' + $el.data('elements') + '');
                    gsap.set($el, { opacity: 1 });
                    gsap.set(elements, { opacity: 0 });
                    gsap.fromTo(elements, { duration: 1, opacity: 0, x: -10 }, { x: 0, opacity: 1, stagger: 0.2, delay: 0.2 });
                    break;
                case 'video-text':
                    var vid = $el.find('.js-col-66');
                    var inf = $el.find('.js-col-33');
                    gsap.set($el, { opacity: 1 });
                    gsap.set([vid, inf], { opacity: 0 });
                    gsap.to(vid, { duration: 1, opacity: 1, delay: 0.2 });
                    gsap.fromTo(inf, { duration: 1, opacity: 0, x: -20 }, { opacity: 1, x: 0, delay: 0.4 });
                    break;
                case 'heading':
                    var hTitle = $el.find('.js-title'),
                        hr = $el.find('.js-heading-hr');
                    var splitTitle = new SplitText(hTitle, { type: 'words, chars' });
                    gsap.set($el, { opacity: 1 });
                    gsap.fromTo(splitTitle.chars, { duration: 1, opacity: 0 }, { opacity: 1, stagger: 0.05 });
                    gsap.fromTo(hr, { duration: 1, scaleX: 0 }, { scaleX: 1, delay: 0.5 });
                    break;
                case 'titleFadeIn':
                    var lead = $el.find('.js-fixed-title'),
                        sub = $el.find('.js-sub'),
                        arr = $el.find('.js-arr');
                    gsap.from(lead, { duration: 1.5, opacity: 0, scale: 1.2, delay: 2 });
                    gsap.from(sub, { duration: 1, opacity: 0, y: 30, delay: 3.2 });
                    gsap.from(arr, { duration: 1, opacity: 0, y: 30, delay: 3.7 });
                    break;
                case 'intro':
                    var curtain = $el.find('.js-curtain');
                    gsap.set($el, { opacity: 1 });
                    gsap.to(curtain, { duration: 3, opacity: 0, delay: 1 });
                    $('html').addClass('is-animated');
                    break;
                case 'header':
                    gsap.set($el, { opacity: 1 });
                    var htime = $el.find('.js-time'),
                        socialD = $el.find('.phone-hide .social__item'),
                        shareText = $el.find('.phone-hide .social__title'),
                        hHr = $el.find('.js-header-hr');
                    gsap.fromTo([htime, shareText, socialD], { duration: 1, opacity: 0, x: -10 }, { x: 0, opacity: 1, stagger: 0.1 });
                    gsap.fromTo(hHr, { scaleX: 0 }, { scaleX: 1 });
                    break;
                default:
                    console.warn("animation type \"" + type + "\" does not exist");
                    break;
            }
        }
    }, {
        key: "parallax",
        value: function parallax(item, sT, windowHeight, headerHeight) {
            if (item.shift) {
                var $el = item.$el;
                var y = item.y;
                var pyBottom = sT + (1 - item.start) * windowHeight;
                var pyTop = sT - item.height;
                if (y >= pyTop + headerHeight && y <= pyBottom) {
                    var percent = (y - sT + item.height - headerHeight) / (windowHeight + item.height - headerHeight);
                    y = Math.round(percent * item.shift);
                    var time = !item.done ? 0 : 0.5;
                    item.done = true;
                    gsap.killTweensOf($el);
                    gsap.to($el, {
                        duration: time,
                        y: y,
                        roundProps: ['y'],
                        ease: 'sine'
                    });
                }
            } else if (item.type) {
                var _$el = item.$el;
                var $elSticky = _$el.parent().parent();
                var _y = item.y;
                var _pyBottom = sT + (1 - item.start) * windowHeight;
                var _pyTop = sT - item.height;
                var pyTopSticky = sT - $elSticky.height();
                switch (item.type) {
                    case 'hero':
                        gsap.set(item.$el, {
                            y: !Browser_1.browser.mobile ? sT * 0.5 : 0
                        });
                        break;
                    case 'fixedImage':
                        if (_y >= _pyTop && _y <= _pyBottom) {
                            if (!_$el.hasClass('has-parallax')) {
                                _$el.addClass('has-parallax');
                            }
                        } else {
                            _$el.removeClass('has-parallax');
                        }
                        break;
                    case 'css-animation':
                        if (_y >= _pyTop + headerHeight && _y <= _pyBottom) {
                            item.$el.hasClass('animation-play') ? null : item.$el.addClass('animation-play');
                        } else {
                            item.$el.removeClass('animation-play');
                        }
                        break;
                    case 'relativeParallax':
                        var availableSpace = item.childHeight - item.height;
                        var maxShift = Math.min(availableSpace, item.height + headerHeight);
                        var _percent = (sT - item.y + windowHeight) / (windowHeight + item.height);
                        var posY = Math.round((1 - _percent) * maxShift);
                        posY = posY < 0 ? 0 : posY;
                        posY = posY > maxShift ? maxShift : posY;
                        gsap.set(item.$child, {
                            y: -posY
                        });
                        break;
                    default:
                        console.warn("animation type \"" + item.type + "\" does not exist");
                        break;
                }
            }
        }
    }], [{
        key: "scrollToElement",
        value: function scrollToElement($el, offset, duration) {
            return new Promise(function (resolve) {
                Scroll.animating = true;
                var y = $el.offset().top - Scroll.headerHeight + (offset || 0);
                var obj = {
                    y: Math.max(document.body.scrollTop, window.pageYOffset)
                };
                gsap.killTweensOf(obj);
                gsap.to(obj, {
                    y: y,
                    ease: 'sine',
                    duration: typeof duration === 'undefined' ? 1 : duration,
                    onUpdate: function onUpdate() {
                        window.scrollTo(0, obj.y);
                    },
                    onComplete: function onComplete() {
                        Scroll.animating = false;
                        resolve();
                    }
                });
            });
        }
    }, {
        key: "resetScrollCache",
        value: function resetScrollCache(pathname) {
            Scroll.instance.cache[pathname] = 0;
        }
    }, {
        key: "disable",
        value: function disable() {
            this.disabled = true;
        }
    }, {
        key: "enable",
        value: function enable() {
            this.animating = false;
            this.disabled = false;
        }
    }, {
        key: "scrollToPath",
        value: function scrollToPath(fast) {
            var $target = $('[data-path="' + window.location.pathname + '"]');
            if ($target[0]) {
                Scroll.scrollToElement($target, 0, 0);
                return true;
            } else {
                return false;
            }
        }
    }]);

    return Scroll;
}();

exports.Scroll = Scroll;
Scroll.animating = false;

},{"./Breakpoint":2,"./Browser":3,"./Classes":4,"./Site":11}],10:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Share = function () {
    function Share() {
        _classCallCheck(this, Share);

        this.bind();
    }

    _createClass(Share, [{
        key: "bind",
        value: function bind() {
            $('[data-share]').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var winWidth = parseInt($(e.currentTarget).attr('data-winwidth'), 10) || 520;
                var winHeight = parseInt($(e.currentTarget).attr('data-winheight'), 10) || 350;
                var winTop = screen.height / 2 - winHeight / 2;
                var winLeft = screen.width / 2 - winWidth / 2;
                var currentTarget = e.currentTarget;
                var href = currentTarget.href;
                var data = $(e.currentTarget).data('share');
                if (data === 'linkedin') {
                    winWidth = 420;
                    winHeight = 430;
                    winTop = winTop - 100;
                }
                window.open(href, 'sharer' + data, 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + winWidth + ',height=' + winHeight);
                return false;
            });
        }
    }]);

    return Share;
}();

exports.Share = Share;

},{}],11:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var PushStates_1 = require("./PushStates");
var Breakpoint_1 = require("./Breakpoint");
var Scroll_1 = require("./Scroll");
var Page_1 = require("./pages/Page");
var Browser_1 = require("./Browser");
var Loader_1 = require("./Loader");
var Classes_1 = require("./Classes");
var Copy_1 = require("./Copy");
var Share_1 = require("./Share");
var Api_1 = require("./Api");
var Utils = require("./Utils");

var Site = function () {
    function Site() {
        var _this = this;

        _classCallCheck(this, Site);

        this.onState = function () {
            var pageChangedState = _this.currentPage.onState();
            if (!pageChangedState) {
                var pushStatesLoadPromise = _this.pushStates.load();
                var animateOutPromise = _this.currentPage.animateOut();
                animateOutPromise.then(function () {
                    _this.loader.show();
                });
                _this.scroll.stop();
                var loadingPromises = [pushStatesLoadPromise, animateOutPromise];
                Promise.all(loadingPromises).then(_this.render);
            }
        };
        this.onLoadProgress = function (progress) {
            _this.loader.set(0.5 * progress);
        };
        this.onPageProgress = function (progress) {
            _this.loader.set(0.5 + 0.5 * progress);
        };
        this.onPageAppend = function (el) {
            PushStates_1.PushStates.bind(el[0]);
            _this.scroll.load();
        };
        this.render = function () {
            if (_this.currentPage) {
                _this.currentPage.off();
                _this.currentPage.destroy();
                _this.currentPage = null;
            }
            _this.scroll.destroy();
            console.groupEnd();
            console.group();
            _this.pushStates.render();
            _this.setCurrentPage().then(_this.onPageLoaded);
            PushStates_1.PushStates.setTitle($('meta[property="og:title"]').attr('content'));
        };
        this.onPageLoaded = function () {
            exports.$body.removeAttr('class');
            _this.loader.hide();
            Utils.enableBodyScrolling(Scroll_1.Scroll.scrollTop);
            Scroll_1.Scroll.scrollToElement(exports.$body, 0, 0);
            _this.currentPage.animateIn();
            exports.$pageHeader = $('#page-header').length > 0 ? $('#page-header') : null;
            _this.detectHomePage();
            PushStates_1.PushStates.setNavbarVisibility();
            Scroll_1.Scroll.scrollToPath(true);
            _this.scroll.load();
            _this.scroll.start();
            $('article').parent().addClass('is-loaded');
        };
        console.group();
        console.log('site');
        Site.instance = this;
        exports.pixelRatio = window.devicePixelRatio || 1;
        exports.debug = window.location.search.indexOf('debug') >= 0;
    }

    _createClass(Site, [{
        key: "init",
        value: function init() {
            var _this2 = this;

            Breakpoint_1.Breakpoint.update();
            Browser_1.Browser.update();
            exports.$doc = $(document);
            exports.$window = $(window);
            exports.$body = $('body');
            exports.$article = $('#article-main');
            exports.$main = $('#main');
            this.pushStates = new PushStates_1.PushStates();
            this.pushStates.on(PushStates_1.PushStatesEvents.CHANGE, this.onState);
            this.pushStates.on(PushStates_1.PushStatesEvents.PROGRESS, this.onLoadProgress);
            this.scroll = new Scroll_1.Scroll();
            this.loader = new Loader_1.Loader($('.js-loader'));
            this.loader.show();
            this.loader.set(0.5);
            new Copy_1.Copy();
            new Share_1.Share();
            new Api_1.API();
            Api_1.API.bind();
            Promise.all([this.setCurrentPage(), Utils.setRootVars()]).then(this.onPageLoaded);
            if (exports.debug) {
                Utils.stats();
            }
            exports.$window.on('orientationchange', function () {
                return setTimeout(function () {
                    Utils.setRootVars();
                }, 100);
            });
            exports.$window.on('resize', function () {
                return _this2.onResize();
            });
        }
    }, {
        key: "onResize",
        value: function onResize() {
            Breakpoint_1.Breakpoint.update();
            if (Breakpoint_1.breakpoint.desktop && !Browser_1.browser.mobile) {
                Utils.setRootVars();
            }
            var width = exports.$window.width();
            var height = exports.$window.height();
            var changed = !this.lastBreakpoint || this.lastBreakpoint.value !== Breakpoint_1.breakpoint.value;
            this.lastBreakpoint = Breakpoint_1.breakpoint;
            if (this.currentPage) {
                this.currentPage.resize(width, height, Breakpoint_1.breakpoint, changed);
            }
            this.loader.resize(width, height);
            this.scroll.resize();
        }
    }, {
        key: "preloadAssets",
        value: function preloadAssets() {
            var assets = [];
            var il = imagesLoaded('.preload-bg', {
                background: true
            });
            if (assets && assets.length > 0) {
                for (var i = 0; i < assets.length; ++i) {
                    il.addBackground(assets[i], null);
                }
            }
            return new Promise(function (resolve, reject) {
                il.jqDeferred.always(function () {
                    resolve();
                });
            });
        }
    }, {
        key: "detectHomePage",
        value: function detectHomePage() {
            exports.$pageHeader ? exports.$body.addClass('is-home-page') : null;
        }
    }, {
        key: "setCurrentPage",
        value: function setCurrentPage() {
            var $pageEl = $('[data-page]'),
                pageName = $pageEl.data('page') || 'Page',
                pageOptions = $pageEl.data('options');
            console.log($pageEl, pageName);
            if (pageName === undefined) {
                if (pageName !== 'undefined') {
                    console.warn('There is no "%s" in Pages!', pageName);
                }
                pageName = 'Page';
            }
            if ($pageEl.length > 1) {
                console.warn('Only one [data-page] element, please!');
            } else if ($pageEl.length === 0) {
                $pageEl = $($('#main').find('article')[0] || $('#main').children().first()[0]);
            }
            var page = new Classes_1.pages[pageName]($pageEl, pageOptions);
            this.currentPage = page;
            Api_1.API.bind();
            page.on(Page_1.PageEvents.PROGRESS, this.onPageProgress);
            page.on(Page_1.PageEvents.CHANGE, this.onPageAppend);
            this.onResize();
            return page.preload();
        }
    }]);

    return Site;
}();

exports.Site = Site;
$(document).ready(function () {
    exports.site = new Site();
    exports.site.init();
});

},{"./Api":1,"./Breakpoint":2,"./Browser":3,"./Classes":4,"./Copy":5,"./Loader":7,"./PushStates":8,"./Scroll":9,"./Share":10,"./Utils":12,"./pages/Page":25}],12:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: true });
var Browser_1 = require("./Browser");
var Breakpoint_1 = require("./Breakpoint");
var Site_1 = require("./Site");
function generateUID() {
    return '' + new Date().getTime() + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}
exports.generateUID = generateUID;
exports.keys = {
    enter: 13,
    esc: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36
};
function testAutoplay() {
    return new Promise(function (resolve) {
        if (_typeof(Modernizr.videoautoplay) !== undefined) {
            resolve(Modernizr.videoautoplay);
        } else {
            Modernizr.on('videoautoplay', function () {
                resolve(Modernizr.videoautoplay);
            });
        }
    });
}
exports.testAutoplay = testAutoplay;
function parseToTime(sec) {
    var totalSec = parseInt('' + sec, 10);
    var hours = parseInt('' + totalSec / 3600, 10) % 24;
    var minutes = parseInt('' + totalSec / 60, 10) % 60;
    var seconds = totalSec % 60;
    var hrsDisplay = (hours < 10 ? '0' + hours : hours) + ':';
    return (hours > 0 ? hrsDisplay : '') + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
}
exports.parseToTime = parseToTime;
function stats() {
    var stats = new Stats();
    stats.showPanel(0);
    $(stats.dom).css({ 'pointer-events': 'none', 'top': 110 });
    document.body.appendChild(stats.dom);
    function animate() {
        stats.begin();
        stats.end();
        requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
    return stats;
}
exports.stats = stats;
function timeFormat(time) {
    var minutes = Math.floor(time / 60).toString();
    minutes = parseInt(minutes, 10) >= 10 ? minutes : '0' + minutes;
    var seconds = Math.floor(time % 60).toString();
    seconds = parseInt(seconds, 10) >= 10 ? seconds : '0' + seconds;
    return minutes.toString() + ':' + seconds.toString();
}
exports.timeFormat = timeFormat;
function updateImageSources() {
    if (Browser_1.browser.ie) {
        $('[data-iesrc]').each(function (i, img) {
            img.setAttribute('src', img.getAttribute('data-iesrc'));
            img.removeAttribute('data-iesrc');
        });
    }
    $('[data-src]').each(function (i, img) {
        img.setAttribute('src', img.getAttribute('data-src'));
        img.removeAttribute('data-src');
    });
    $('[data-srcset]').each(function (i, img) {
        img.setAttribute('srcset', img.getAttribute('data-srcset'));
        img.removeAttribute('data-srcset');
    });
}
exports.updateImageSources = updateImageSources;
function shuffle(a) {
    var j = void 0,
        x = void 0,
        i = void 0;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
exports.shuffle = shuffle;
function setRootVars() {
    var headerHeight = Breakpoint_1.breakpoint.desktop ? $('#navbar').height() : 0;
    document.documentElement.style.setProperty('--app-height', window.innerHeight - headerHeight + "px");
    document.documentElement.style.setProperty('--col-25', $('.col-pattern-25').width() + "px");
    document.documentElement.style.setProperty('--col-66', $('.col-66').width() + "px");
    var marg = !Breakpoint_1.breakpoint.desktop ? 50 : 120;
    $('.aside').css('height', Site_1.$window.height() + marg);
}
exports.setRootVars = setRootVars;
function enableBodyScrolling(sT) {
    $('body').removeAttr('style');
    $('body').removeClass('scrolling-disable');
    window.scrollTo(0, sT);
}
exports.enableBodyScrolling = enableBodyScrolling;
function disableBodyScrolling(sT) {
    var position = Browser_1.browser.ie ? 'absolute' : 'fixed';
    var top = Browser_1.browser.ie ? '' : -sT + 'px';
    $('body').addClass('scrolling-disable');
    $('body').css({
        'overflow': 'hidden',
        'will-change': 'top',
        'width': '100%',
        'touch-action': 'none'
    });
}
exports.disableBodyScrolling = disableBodyScrolling;
exports.translations = {
    'invalid-email': {
        'en': 'Invalid email address format',
        'pl': 'Niepoprawny format adresu e-mail'
    },
    'required-field': {
        'en': 'Required field',
        'pl': 'Pole obowiązkowe'
    },
    'invalid-zip': {
        'en': 'Enter zip-code in five digits format',
        'pl': 'Wpisz kod pocztowy w formacie XX-XXX'
    }
};

},{"./Breakpoint":2,"./Browser":3,"./Site":11}],13:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");
var PushStates_1 = require("../PushStates");

var Aside = function (_Component_1$Componen) {
    _inherits(Aside, _Component_1$Componen);

    function Aside(view, options) {
        _classCallCheck(this, Aside);

        var _this = _possibleConstructorReturn(this, (Aside.__proto__ || Object.getPrototypeOf(Aside)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {};
        _this.hideMenu = function (e) {
            PushStates_1.PushStates.asideToggle(e);
        };
        _this.$item = _this.view.find('.js-item');
        _this.bind();
        console.log(_this.view.attr('data-component'), 'mounted');
        return _this;
    }

    _createClass(Aside, [{
        key: "bind",
        value: function bind() {
            this.$item.off('.menu').on('click.menu', this.hideMenu);
        }
    }]);

    return Aside;
}(Component_1.Component);

exports.Aside = Aside;

},{"../PushStates":8,"./Component":15}],14:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");

var Chart = function (_Component_1$Componen) {
    _inherits(Chart, _Component_1$Componen);

    function Chart(view, options) {
        _classCallCheck(this, Chart);

        var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.margin = {
            top: 5,
            left: 25,
            right: 50,
            bottom: 49
        };
        _this.graph = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            height: 0,
            width: 0
        };
        _this.colors = {
            gray: 'rgba(97,97,97,0.5)',
            orange: '#fc8c59',
            mint: '#4fdbc5',
            blue: '#5877cc',
            pink: '#B60E63',
            white: '#fff',
            beige: '#fdd49e',
            cinnabar: '#e75040',
            sea: '#26bbe3'
        };
        _this.graphsData = [];
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {
            _this.canvas.width = _this.$wrapper.width();
            _this.canvas.height = _this.$wrapper.height();
            _this.graph = {
                top: _this.margin.top,
                left: _this.margin.left,
                right: _this.canvas.width - _this.margin.right + _this.margin.left,
                bottom: _this.canvas.height - _this.margin.bottom,
                height: _this.canvas.height - _this.margin.top - _this.margin.bottom,
                width: _this.canvas.width - _this.margin.left - _this.margin.right
            };
            _this.draw();
            if (!_this.dataInit) {
                _this.createDataObject();
            }
        };
        _this.onClickTab = function (e) {
            var current = $(e.currentTarget);
            if (current.hasClass('is-on-chart')) {
                _this.animateChart(current.index(), false);
                current.removeClass('is-on-chart');
            } else {
                _this.animateChart(current.index(), true);
                current.addClass('is-on-chart');
            }
        };
        _this.draw = function () {
            _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
            _this.drawBg();
            _this.graphsData.forEach(function (graphData) {
                return _this.drawGraph(graphData);
            });
        };
        _this.drawGraph = function (data) {
            _this.ctx.strokeStyle = data.color;
            _this.ctx.lineWidth = 3;
            _this.ctx.lineCap = 'round';
            _this.ctx.lineJoin = 'round';
            _this.ctx.globalAlpha = 1;
            _this.ctx.beginPath();
            data.yPx.forEach(function (y, i, a) {
                if (i / a.length <= data.xPercent && data.xPercent > 0) {
                    _this.ctx.lineTo(_this.graph.right / a.length * i + _this.graph.left, y);
                    _this.ctx.stroke();
                }
            });
            _this.ctx.closePath();
            if (data.fill) {
                var lastX = _this.margin.left;
                _this.ctx.strokeStyle = 'transparent';
                _this.ctx.fillStyle = data.color;
                _this.ctx.globalAlpha = 0.4;
                _this.ctx.beginPath();
                data.yPx.forEach(function (y, i, a) {
                    if (i / a.length <= data.xPercent && data.xPercent > 0) {
                        _this.ctx.lineTo(_this.graph.right / a.length * i + _this.graph.left, y);
                        _this.ctx.lineTo(_this.graph.right / a.length * i + _this.graph.left, _this.canvas.height - _this.margin.bottom);
                        _this.ctx.lineTo(lastX, _this.canvas.height - _this.margin.bottom);
                        _this.ctx.moveTo(_this.graph.right / a.length * i + _this.graph.left, y);
                        lastX = _this.graph.right / a.length * i + _this.graph.left;
                    }
                });
                _this.ctx.fill();
                _this.ctx.closePath();
            }
        };
        _this.$wrapper = _this.view.find('.js-wrapper');
        _this.$tab = _this.view.find('[data-chart-tab]');
        _this.canvas = _this.view.find('canvas')[0];
        _this.ctx = _this.canvas.getContext('2d');
        _this.bind();
        for (var i = 0; i < _this.$tab.length; i++) {
            _this.animateChart(i, true);
        }
        return _this;
    }

    _createClass(Chart, [{
        key: "createDataObject",
        value: function createDataObject() {
            var _this2 = this;

            this.$tab.each(function (i, el) {
                var dataItem = {
                    id: i,
                    xPercent: 0,
                    yPoints: $(el).data('points'),
                    color: _this2.setColor($(el).data('color')),
                    yPx: _this2.calcYPx($(el).data('points')),
                    fill: i === 0 ? true : false
                };
                _this2.graphsData.push(dataItem);
            });
            this.dataInit = true;
            console.log(this.graphsData);
        }
    }, {
        key: "bind",
        value: function bind() {
            this.$tab.off('.tab').on('click.tab', this.onClickTab);
        }
    }, {
        key: "drawBg",
        value: function drawBg() {
            this.ctx.beginPath();
            this.ctx.lineWidth = 1;
            this.ctx.strokeStyle = this.colors.white;
            this.ctx.moveTo(this.margin.left, this.canvas.height - this.margin.bottom);
            this.ctx.lineTo(this.canvas.width - this.margin.right, this.canvas.height - this.margin.bottom);
            this.ctx.stroke();
            this.ctx.beginPath();
            this.ctx.strokeStyle = this.colors.gray;
            this.ctx.moveTo(this.margin.left, this.margin.top);
            this.ctx.lineTo(this.canvas.width - this.margin.right, this.margin.top);
            this.ctx.stroke();
            var helpersLine = 8;
            var textTransform = 5;
            var step = 5;
            var val = void 0;
            var years = [2015, 2016, 2017, 2018, 2019, 2020, 2021];
            for (var i = 0; i <= helpersLine; i++) {
                val = 50 - step * i;
                this.ctx.beginPath();
                this.ctx.lineJoin = 'round';
                this.ctx.font = '500 12px Quicksand, sans-serif';
                this.ctx.lineWidth = 1;
                this.ctx.fillStyle = this.colors.blue;
                this.ctx.fillText('' + val + '', 0, this.graph.height / helpersLine * i + this.margin.top + textTransform);
                this.ctx.moveTo(this.margin.left, this.graph.height / helpersLine * i + this.margin.top);
                this.ctx.lineTo(this.canvas.width - this.margin.right, this.graph.height / helpersLine * i + this.margin.top);
                this.ctx.stroke();
            }
            for (var j = 0; j < years.length; j++) {
                this.ctx.beginPath();
                this.ctx.lineWidth = 1;
                this.ctx.lineJoin = 'round';
                this.ctx.font = '500 12px Quicksand, sans-serif';
                this.ctx.fillStyle = this.colors.white;
                this.ctx.fillText('' + years[j] + '', (this.canvas.width + this.margin.right + this.margin.left) / years.length * j + this.margin.left, this.canvas.height - textTransform * 2);
                this.ctx.stroke();
            }
        }
    }, {
        key: "animateChart",
        value: function animateChart(id, direction) {
            var dir = direction ? 1 : 0;
            gsap.to(this.graphsData[id], {
                xPercent: dir,
                ease: 'linear',
                onUpdate: this.draw
            });
        }
    }, {
        key: "largestYVal",
        value: function largestYVal(data) {
            var largest = 0;
            for (var i = 0; i < data.length; i++) {
                if (data[i] > largest) {
                    largest = data[i];
                }
            }
            return largest;
        }
    }, {
        key: "calcYPx",
        value: function calcYPx(data) {
            var largest = this.largestYVal(data);
            var arr = [];
            for (var i = 0; i < data.length; i++) {
                var item = Math.round(this.graph.height - data[i] / largest * this.graph.height + this.graph.top);
                arr.push(item);
            }
            return arr;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            var hex = void 0;
            for (var property in this.colors) {
                if (color === property) {
                    hex = this.colors[property];
                }
            }
            return hex;
        }
    }]);

    return Chart;
}(Component_1.Component);

exports.Chart = Chart;

},{"./Component":15}],15:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Handler_1 = require("../Handler");

var ComponentEvents = function ComponentEvents() {
    _classCallCheck(this, ComponentEvents);
};

exports.ComponentEvents = ComponentEvents;
ComponentEvents.CHANGE = 'change';

var Component = function (_Handler_1$Handler) {
    _inherits(Component, _Handler_1$Handler);

    function Component(view, options) {
        _classCallCheck(this, Component);

        var _this = _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).call(this));

        _this.view = view;
        _this.options = options;
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {};
        if (!view[0]) {
            console.warn('component built without view');
        }
        _this.view.data('comp', _this);
        return _this;
    }

    _createClass(Component, [{
        key: "preloadImages",
        value: function preloadImages() {
            return [];
        }
    }, {
        key: "onState",
        value: function onState() {
            return false;
        }
    }, {
        key: "animateIn",
        value: function animateIn(index, delay) {}
    }, {
        key: "animateOut",
        value: function animateOut() {
            return Promise.resolve(null);
        }
    }, {
        key: "turnOff",
        value: function turnOff() {}
    }, {
        key: "turnOn",
        value: function turnOn() {}
    }, {
        key: "destroy",
        value: function destroy() {
            this.view.data('comp', null);
            this.view.off();
            _get(Component.prototype.__proto__ || Object.getPrototypeOf(Component.prototype), "destroy", this).call(this);
        }
    }]);

    return Component;
}(Handler_1.Handler);

exports.Component = Component;

},{"../Handler":6}],16:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");

var Dashboard = function (_Component_1$Componen) {
    _inherits(Dashboard, _Component_1$Componen);

    function Dashboard(view, options) {
        _classCallCheck(this, Dashboard);

        var _this = _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {};
        _this.togglePanel = function (e) {
            if (!_this.isToggled) {
                gsap.to(_this.$body, { duration: 0.5, height: 'auto', ease: 'power2.inOut',
                    onComplete: function onComplete() {
                        _this.$body.addClass('is-toggled');
                        _this.isToggled = true;
                    }
                });
            } else {
                _this.$body.removeClass('is-toggled');
                gsap.to(_this.$body, { duration: 0.5, height: '0', ease: 'power2.inOut',
                    onComplete: function onComplete() {
                        _this.isToggled = false;
                    }
                });
            }
        };
        _this.$toggle = _this.view.find('.js-button-toggle');
        _this.$body = _this.view.find('.js-dashboard-body');
        _this.bind();
        _this.initialState();
        return _this;
    }

    _createClass(Dashboard, [{
        key: "bind",
        value: function bind() {
            this.$toggle.off('.toggle').on('click.toggle', this.togglePanel);
        }
    }, {
        key: "initialState",
        value: function initialState() {
            gsap.set(this.$body, { height: '0' });
        }
    }]);

    return Dashboard;
}(Component_1.Component);

exports.Dashboard = Dashboard;

},{"./Component":15}],17:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");
var Site_1 = require("../Site");

var Dropdown = function (_Component_1$Componen) {
    _inherits(Dropdown, _Component_1$Componen);

    function Dropdown(view, options) {
        _classCallCheck(this, Dropdown);

        var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.isOpen = false;
        _this.toggle = function (e) {
            console.log('toggle dp');
            _this.isOpen ? _this.closeSelect() : _this.openSelect(e);
        };
        _this.onClickAnywhereHandler = function (e) {
            e.stopPropagation();
            e.preventDefault();
            console.log(_this.isOpen, '?????');
            if ($(e.currentTarget).hasClass('js-item') && !_this.isOpen) {
                return;
            }
            if ($(e.target).closest(_this.view).length <= 0) {
                _this.closeSelect();
            }
        };
        _this.onItemClick = function (e) {
            e.stopPropagation();
            e.preventDefault();
            var current = $(e.currentTarget).data('value');
            _this.closeSelect();
            _this.$selected.html(current);
            _this.view.attr('data-selected', current);
        };
        _this.$trigger = _this.view.find('.js-trigger');
        _this.$selected = _this.view.find('[data-select]');
        _this.$item = _this.view.find('[data-value]');
        _this.bind();
        _this.view.attr('data-selected', _this.$selected.text());
        return _this;
    }

    _createClass(Dropdown, [{
        key: "bind",
        value: function bind() {
            this.view.off('.select').on('click.select', this.toggle);
            Site_1.$doc.off('.dropdown').on('click.dropdown', this.onClickAnywhereHandler);
            this.$item.off('.selection').on('click.selection', this.onItemClick);
        }
    }, {
        key: "openSelect",
        value: function openSelect(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!this.isOpen) {
                this.view.addClass('is-open');
                this.isOpen = true;
            }
        }
    }, {
        key: "closeSelect",
        value: function closeSelect() {
            console.log(this.isOpen, 'open?');
            if (this.isOpen) {
                this.view.removeClass('is-open');
                this.isOpen = false;
            }
        }
    }]);

    return Dropdown;
}(Component_1.Component);

exports.Dropdown = Dropdown;

},{"../Site":11,"./Component":15}],18:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");

var Filters = function (_Component_1$Componen) {
    _inherits(Filters, _Component_1$Componen);

    function Filters(view, options) {
        _classCallCheck(this, Filters);

        var _this = _possibleConstructorReturn(this, (Filters.__proto__ || Object.getPrototypeOf(Filters)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.filters = [];
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {
            setTimeout(function () {
                _this.$clear.css('height', _this.$panel.outerHeight());
            });
        };
        _this.markAllSectors = function () {
            var timeChecked = _this.$itemTime.filter('.is-active').length > 0 ? _this.$itemTime.filter('.is-active') : null;
            _this.clearArray();
            _this.$itemSector.each(function (i, el) {
                _this.addElementToArray($(el), _this.filters);
            });
            _this.$allSectors.addClass('is-active');
            _this.isAllChecked = true;
            if (timeChecked) {
                _this.addElementToArray(timeChecked, _this.filters);
                _this.markTimeline(timeChecked);
            }
        };
        _this.clearArray = function () {
            _this.filters = [];
            _this.$itemTime.removeClass('is-active');
            _this.$itemSector.removeClass('is-active');
            _this.$allSectors.removeClass('is-active');
            _this.isAllChecked = false;
            _this.unmarkTimeline();
        };
        _this.toggleSector = function (e) {
            var current = $(e.currentTarget);
            if (current.hasClass('is-active')) {
                _this.removeElementFromArray(current, _this.filters);
                if (_this.isAllChecked) {
                    _this.$allSectors.removeClass('is-active');
                    _this.isAllChecked = false;
                }
            } else {
                _this.addElementToArray(current, _this.filters);
            }
        };
        _this.toggleTime = function (e) {
            var current = $(e.currentTarget);
            _this.unmarkTimeline();
            if (current.hasClass('is-active')) {
                _this.removeElementFromArray(current, _this.filters);
            } else {
                var activePrev = _this.$itemTime.filter('.is-active').length > 0 ? _this.$itemTime.filter('.is-active') : null;
                if (activePrev) {
                    _this.removeElementFromArray(activePrev, _this.filters);
                }
                _this.addElementToArray(current, _this.filters);
                _this.markTimeline(current);
            }
        };
        _this.$clear = _this.view.find('.js-clear');
        _this.$panel = _this.view.find('.js-panel');
        _this.$itemSector = _this.view.find('.js-item');
        _this.$itemTime = _this.view.find('.js-time');
        _this.$timelineItem = _this.view.find('[data-time]');
        _this.$allSectors = _this.view.find('.js-item-all');
        _this.bind();
        return _this;
    }

    _createClass(Filters, [{
        key: "bind",
        value: function bind() {
            this.$itemSector.off('.sector').on('click.sector', this.toggleSector);
            this.$itemTime.off('.time').on('click.time', this.toggleTime);
            this.$clear.off('.clear').on('click.clear', this.clearArray);
            this.$allSectors.off('.all').on('click.all', this.markAllSectors);
        }
    }, {
        key: "markTimeline",
        value: function markTimeline(el) {
            if (el.hasClass('js-time')) {
                this.$timelineItem.removeClass('is-active');
                var timelinedot = this.$timelineItem.filter('[data-time=' + el.data('item') + ']');
                timelinedot.addClass('is-active');
            }
        }
    }, {
        key: "unmarkTimeline",
        value: function unmarkTimeline() {
            this.$timelineItem.removeClass('is-active');
        }
    }, {
        key: "removeElementFromArray",
        value: function removeElementFromArray($el, array) {
            var index = this.filters.indexOf($el.data('item'));
            if (index > -1) {
                array.splice(index, 1);
                $el.removeClass('is-active');
            }
            console.log('FILTERS:', this.filters);
        }
    }, {
        key: "addElementToArray",
        value: function addElementToArray($el, array) {
            array.push($el.data('item'));
            $el.addClass('is-active');
            console.log('FILTERS:', this.filters);
        }
    }]);

    return Filters;
}(Component_1.Component);

exports.Filters = Filters;

},{"./Component":15}],19:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");

var Masonry = function (_Component_1$Componen) {
    _inherits(Masonry, _Component_1$Componen);

    function Masonry(view, options) {
        _classCallCheck(this, Masonry);

        var _this = _possibleConstructorReturn(this, (Masonry.__proto__ || Object.getPrototypeOf(Masonry)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.data = [];
        _this.dataArray = [];
        _this.itemMargin = 3;
        _this.gridRows = 20;
        _this.gridCols = 20;
        _this.gridCells = _this.gridCols * _this.gridRows;
        _this.cellsBalance = _this.gridCells;
        _this.gridCell = {
            width: _this.view.width() / _this.gridCols,
            height: _this.view.height() / _this.gridRows
        };
        _this.minCellWidth = 3;
        _this.minCellHeight = 3;
        _this.itemPositioning = [];
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {};
        _this.$item = _this.view.find('.js-masonry-tile');
        _this.$item.each(function (i, el) {
            var dataItem = {
                sector: $(el).data('tile'),
                value: $(el).data('value'),
                color: $(el).data('color')
            };
            _this.data.push(dataItem);
        });
        _this.area = (_this.view.width() - _this.itemMargin * 3) * _this.view.height();
        _this.bind();
        return _this;
    }

    _createClass(Masonry, [{
        key: "bind",
        value: function bind() {
            this.getArrFromObject();
        }
    }, {
        key: "getArrFromObject",
        value: function getArrFromObject() {
            this.dataArray = Object.entries(this.data).sort(function (a, b) {
                return a[0].localeCompare(b[0]);
            });
            this.dataArray.forEach(function (el, i) {
                var value = el[1].value;
                var sector = el[1].sector;
                var color = el[1].color;
                var index = i;
            });
        }
    }, {
        key: "setTileSize",
        value: function setTileSize(sector, value, color, index) {
            var current = this.$item.filter('[data-tile=' + sector + ']');
            var area = void 0,
                h = void 0,
                w = void 0,
                t = void 0,
                l = void 0,
                column_start = void 0,
                column_end = void 0,
                row_start = void 0,
                row_end = void 0,
                item = void 0,
                areaGrid = void 0;
            area = this.area * (value / 100);
            if (index === 0) {
                column_start = 1;
                row_start = 1;
                row_end = this.gridRows;
                column_end = Math.round(area / (this.gridCell.height * row_end) / this.gridCell.width);
                areaGrid = Math.round(area / (this.gridCell.width * this.gridCell.height));
                areaGrid = areaGrid % 2 === 0 ? areaGrid : areaGrid - 1;
            }
            item = {
                column_start: column_start,
                column_end: column_end,
                row_start: row_start,
                row_end: row_end
            };
            current.css({
                position: 'relative',
                opacity: 1,
                'grid-column-start': column_start,
                'grid-column-end': column_end,
                'grid-row-start': row_start,
                'grid-row-end': 'span' + row_end,
                backgroundColor: color
            });
            this.itemPositioning.push(item);
            this.cellsBalance = this.cellsBalance - areaGrid;
        }
    }]);

    return Masonry;
}(Component_1.Component);

exports.Masonry = Masonry;

},{"./Component":15}],20:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");
var Site_1 = require("../Site");

var Range = function (_Component_1$Componen) {
    _inherits(Range, _Component_1$Componen);

    function Range(view, options) {
        _classCallCheck(this, Range);

        var _this = _possibleConstructorReturn(this, (Range.__proto__ || Object.getPrototypeOf(Range)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.isOpen = false;
        _this.toggle = function (e) {
            _this.isOpen ? _this.closeSelect() : _this.openSelect(e);
        };
        _this.onClickAnywhereHandler = function (e) {
            if ($(e.currentTarget).hasClass('js-item') || !_this.isOpen) {
                return;
            }
            if ($(e.target).closest(_this.view).length <= 0) {
                _this.closeSelect();
            }
        };
        _this.onItemClick = function (e) {
            e.stopPropagation();
            e.preventDefault();
            var current = $(e.currentTarget).attr('value');
            _this.closeSelect();
            _this.$selected.html(current);
            _this.$selected.attr('data-selected', current);
        };
        _this.$trigger = _this.view.find('.js-trigger');
        _this.$selected = _this.view.find('[data-selected]');
        _this.$radio = _this.view.find('input[type=radio]');
        _this.bind();
        return _this;
    }

    _createClass(Range, [{
        key: "bind",
        value: function bind() {
            this.$trigger.off('.toggle').on('click.toggle', this.toggle);
            Site_1.$doc.off('.smalldropdown').on('click.smalldropdown', this.onClickAnywhereHandler);
            this.$radio.off('.selection').on('click.selection', this.onItemClick);
        }
    }, {
        key: "openSelect",
        value: function openSelect(e) {
            e.stopPropagation();
            e.preventDefault();
            if (!this.isOpen) {
                this.view.addClass('is-open');
                this.isOpen = true;
            }
        }
    }, {
        key: "closeSelect",
        value: function closeSelect() {
            console.log(this.isOpen, 'open?');
            if (this.isOpen) {
                this.view.removeClass('is-open');
                this.isOpen = false;
            }
        }
    }]);

    return Range;
}(Component_1.Component);

exports.Range = Range;

},{"../Site":11,"./Component":15}],21:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Site_1 = require("../Site");
var Breakpoint_1 = require("../Breakpoint");
var Component_1 = require("./Component");
var Swipe_1 = require("./Swipe");

var Slider = function (_Component_1$Componen) {
    _inherits(Slider, _Component_1$Componen);

    function Slider(view, options) {
        _classCallCheck(this, Slider);

        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.offset = 0;
        _this.index = 1;
        _this.margin = 32;
        _this.resize = function (wdt, hgt, breakpoint, bpChanged) {
            if (breakpoint.phone && (_this.settings.type === 'phone-disable' || _this.settings.phone === 'disabled')) {
                return;
            }
            _this.itemWidth = _this.$item.width() + _this.margin;
            var width = _this.itemWidth * _this.$item.length;
            _this.$list.css('width', width);
            _this.go(_this.index);
        };
        _this.onSwipe = function (e) {
            if (e.direction === 'left' || e.direction === 'right') {
                _this.shift({
                    left: +1, right: -1
                }[e.direction]);
            }
        };
        _this.$item = _this.view.find('.js-item');
        _this.$list = _this.view.find('.js-list');
        _this.$buttonPrev = _this.view.find('.js-prev');
        _this.$buttonNext = _this.view.find('.js-next');
        _this.$dot = _this.view.find('.js-dot');
        _this.margin = _this.$item.outerWidth(true) - _this.$item.width();
        _this.itemWidth = _this.$item.width() + _this.margin;
        _this.settings = $.extend({
            type: ''
        }, options || view.data('options') || {});
        if (Breakpoint_1.breakpoint.phone && (_this.settings.type === 'phone-disable' || _this.settings.phone === 'disabled')) {
            return _possibleConstructorReturn(_this);
        }
        if (!Breakpoint_1.breakpoint.desktop && _this.settings.mode === 'center-mobile') {
            _this.settings.mode = 'center';
        }
        if (Breakpoint_1.breakpoint.tablet && _this.settings.mode === 'center-tablet') {
            _this.settings.mode = 'center';
        }
        _this.init();
        _this.bind();
        var swipeEl = Breakpoint_1.breakpoint.desktop ? _this.$list : _this.$item.first();
        _this.swipe = new Swipe_1.Swipe(_this.$list, {
            horizontal: true,
            vertical: false,
            minimum: 80,
            disableMouse: false,
            disableTouch: false
        });
        _this.swipe.on(Swipe_1.SwipeEvents.END, _this.onSwipe);
        return _this;
    }

    _createClass(Slider, [{
        key: "init",
        value: function init() {
            gsap.set(this.$list, { x: this.offset });
            this.setActiveItems();
            this.resizeDots();
            if (this.settings.mode === 'center' && this.$item.length > 2) {
                this.index = 2;
                this.go(2);
            }
        }
    }, {
        key: "bind",
        value: function bind() {
            var _this2 = this;

            this.$buttonPrev.off('.slidercustom').on('click.slidercustom', function (e) {
                return _this2.prev();
            });
            this.$buttonNext.off('.slidercustom').on('click.slidercustom', function (e) {
                return _this2.next();
            });
            this.$dot.off('.slidercustom').on('click.slidercustom', function (e) {
                return _this2.clickElement(e);
            });
            this.$item.off('.slidercustom').on('click.slidercustom', function (e) {
                return _this2.clickElement(e);
            });
        }
    }, {
        key: "resizeDots",
        value: function resizeDots() {
            if (!this.$dot) {
                return;
            }
            if (this.$dot.length > 7) {
                this.$dot.each(function (el) {
                    $(el).css({
                        'width': '10px',
                        'height': '10px',
                        'margin-left': '3px',
                        'margin-right': '3px'
                    });
                });
            }
        }
    }, {
        key: "shift",
        value: function shift(dir) {
            var old = void 0;
            if (dir === -1) {
                this.prev();
            } else {
                this.next();
            }
        }
    }, {
        key: "clickElement",
        value: function clickElement(e) {
            e.stopPropagation();
            console.log($(e.target));
            if ($(e.target).hasClass('share__button') || $(e.target).hasClass('evaluation') || $(e.target).hasClass('slider__item-footer')) {
                return;
            }
            var el = $(e.currentTarget);
            var i = el.index() + 1;
            this.index = i;
            this.go(this.index);
        }
    }, {
        key: "next",
        value: function next() {
            if (this.index < this.$item.length) {
                this.index = this.index + 1;
                this.go(this.index);
            }
        }
    }, {
        key: "prev",
        value: function prev() {
            if (this.index > 1) {
                this.index = this.index - 1;
                this.go(this.index);
            }
        }
    }, {
        key: "go",
        value: function go(index) {
            var x = index * this.itemWidth - this.itemWidth;
            x = this.settings.mode === 'center' ? x - Site_1.$window.width() * 0.5 - this.margin + this.itemWidth * 0.5 : x;
            gsap.to(this.$list, { duration: 0.5, x: -x, transformOrigin: '50% 50%', ease: 'sine.inOut', onComplete: function onComplete() {} });
            this.setActiveItems();
        }
    }, {
        key: "setActiveItems",
        value: function setActiveItems() {
            this.setNavAvailbility();
            this.$item.removeClass('is-active');
            this.$item.eq(this.index - 1).addClass('is-active');
            this.$dot.removeClass('is-active');
            this.$dot.eq(this.index - 1).addClass('is-active');
            this.setInViewItemClass();
        }
    }, {
        key: "setInViewItemClass",
        value: function setInViewItemClass() {
            if (!Breakpoint_1.breakpoint.phone && this.settings.type === 'article') {
                this.$item.removeClass('is-in-view');
                this.$item.filter('.is-active').next().addClass('is-in-view');
            }
        }
    }, {
        key: "setNavAvailbility",
        value: function setNavAvailbility() {
            switch (true) {
                case this.index == 1:
                    this.$buttonPrev.addClass('is-disabled');
                    this.$buttonNext.removeClass('is-disabled');
                    break;
                case this.index === this.$item.length:
                    this.$buttonNext.addClass('is-disabled');
                    this.$buttonPrev.removeClass('is-disabled');
                    break;
                default:
                    this.$buttonNext.removeClass('is-disabled');
                    this.$buttonPrev.removeClass('is-disabled');
            }
        }
    }]);

    return Slider;
}(Component_1.Component);

exports.Slider = Slider;

},{"../Breakpoint":2,"../Site":11,"./Component":15,"./Swipe":23}],22:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");
var Site_1 = require("../Site");

var Stats = function (_Component_1$Componen) {
    _inherits(Stats, _Component_1$Componen);

    function Stats(view, options) {
        _classCallCheck(this, Stats);

        var _this = _possibleConstructorReturn(this, (Stats.__proto__ || Object.getPrototypeOf(Stats)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.onTabClick = function (e) {
            var current = $(e.currentTarget);
            var index = current.data('tab');
            _this.setActiveView(index);
        };
        _this.$tab = _this.view.find('[data-tab]');
        _this.$item = _this.view.find('[data-view]');
        _this.$wrap = _this.view.find('.js-tabs-wrapper');
        _this.bind();
        _this.setActiveView(2);
        return _this;
    }

    _createClass(Stats, [{
        key: "bind",
        value: function bind() {
            this.$tab.off('.tab').on('click.tab', this.onTabClick);
        }
    }, {
        key: "setActiveView",
        value: function setActiveView(index) {
            var _this2 = this;

            this.tabToShow = index;
            this.$tab.removeClass('is-active');
            this.$tab.filter('[data-tab=' + index + ']').addClass('is-active');
            this.hideCurrent().then(function () {
                _this2.show(_this2.tabToShow);
                _this2.tabToShow = null;
                Site_1.$window.resize();
            });
        }
    }, {
        key: "hideCurrent",
        value: function hideCurrent() {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                if (!_this3.$current) {
                    resolve();
                    return;
                }
                gsap.to(_this3.$current, {
                    opacity: 0,
                    duration: 0.3,
                    ease: 'sine',
                    onComplete: function onComplete() {
                        _this3.$current.removeClass('is-active');
                        resolve();
                    }
                });
            });
        }
    }, {
        key: "show",
        value: function show(index) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
                _this4.$current = _this4.$item.filter('[data-view=' + index + ']');
                _this4.$current.addClass('is-active');
                gsap.fromTo(_this4.$current, {
                    opacity: 0
                }, {
                    opacity: 1,
                    duration: 0.7,
                    ease: 'sine',
                    onComplete: function onComplete() {
                        return resolve();
                    }
                });
            });
        }
    }]);

    return Stats;
}(Component_1.Component);

exports.Stats = Stats;

},{"../Site":11,"./Component":15}],23:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Handler_1 = require("../Handler");
var Utils = require("../Utils");
var Site_1 = require("../Site");

var SwipeEvents = function SwipeEvents() {
    _classCallCheck(this, SwipeEvents);
};

exports.SwipeEvents = SwipeEvents;
SwipeEvents.START = 'start';
SwipeEvents.UPDATE = 'update';
SwipeEvents.END = 'end';

var SwipeAxes = function SwipeAxes() {
    _classCallCheck(this, SwipeAxes);
};

exports.SwipeAxes = SwipeAxes;
SwipeAxes.HORIZONTAL = 'h';
SwipeAxes.VERTICAL = 'v';

var SwipeDirections = function SwipeDirections() {
    _classCallCheck(this, SwipeDirections);
};

exports.SwipeDirections = SwipeDirections;
SwipeDirections.LEFT = 'left';
SwipeDirections.RIGHT = 'right';
SwipeDirections.UP = 'up';
SwipeDirections.DOWN = 'down';
SwipeDirections.NONE = 'none';
SwipeDirections.CLICK = 'click';

var Swipe = function (_Handler_1$Handler) {
    _inherits(Swipe, _Handler_1$Handler);

    function Swipe(view, options) {
        _classCallCheck(this, Swipe);

        var _this = _possibleConstructorReturn(this, (Swipe.__proto__ || Object.getPrototypeOf(Swipe)).call(this));

        _this.view = view;
        _this.options = options;
        _this.swiping = false;
        _this.deltaX = 0;
        _this.deltaY = 0;
        _this.x = 0;
        _this.y = 0;
        _this.startX = 0;
        _this.startY = 0;
        _this.mouse = { x: 0, y: 0 };
        _this.dragged = false;
        _this.axe = null;
        _this.offsetX = 0;
        _this.offsetY = 0;
        _this.disabled = false;
        _this.onMouseDown = function (e) {
            e.stopPropagation();
            if (e.which && e.which === 3 || e.button && e.button === 2) {
                return;
            }
            e.preventDefault();
            _this.mouse.startX = (e.clientX || e.pageX) - _this.offsetX;
            _this.mouse.startY = (e.clientY || e.pageY) - _this.offsetY;
            _this.startSwipe();
        };
        _this.onMouseMove = function (e) {
            e.stopPropagation();
            e.preventDefault();
            if (!!_this.swiping) {
                _this.mouse.x = (e.clientX || e.pageX) - _this.offsetX;
                _this.mouse.y = (e.clientY || e.pageY) - _this.offsetY;
                var diffX = Math.abs(_this.mouse.x - _this.mouse.startX);
                var diffY = Math.abs(_this.mouse.y - _this.mouse.startY);
                if (!_this.axe && (diffX > 12 || diffY > 12)) {
                    _this.axe = diffX > diffY ? SwipeAxes.HORIZONTAL : SwipeAxes.VERTICAL;
                }
                if (diffX > 12 || diffY > 12) {
                    _this.dragged = true;
                }
                if (_this.axe === SwipeAxes.HORIZONTAL && !!_this.settings.horizontal || _this.axe === SwipeAxes.VERTICAL && !!_this.settings.vertical) {
                    e.preventDefault();
                    _this.updateSwipe();
                }
            }
        };
        _this.onMouseUp = function (e) {
            if (!!_this.swiping) {
                e.preventDefault();
                e.stopPropagation();
                _this.endSwipe();
                return false;
            }
            _this.view.find('a').css({ 'pointer-events': '' });
            _this.axe = null;
        };
        _this.onTouchStart = function (e) {
            _this.mouse.startX = e.originalEvent.touches[0].pageX;
            _this.mouse.startY = e.originalEvent.touches[0].pageY;
            _this.startSwipe();
        };
        _this.onTouchMove = function (e) {
            if (!!_this.swiping) {
                _this.mouse.x = e.originalEvent.touches[0].pageX;
                _this.mouse.y = e.originalEvent.touches[0].pageY;
                var diffX = Math.abs(_this.mouse.x - _this.mouse.startX);
                var diffY = Math.abs(_this.mouse.y - _this.mouse.startY);
                if (!_this.axe && (diffX > 12 || diffY > 12)) {
                    _this.axe = diffX > diffY ? SwipeAxes.HORIZONTAL : SwipeAxes.VERTICAL;
                }
                if (diffX > 12 || diffY > 12) {
                    _this.dragged = true;
                }
                if (_this.axe === SwipeAxes.HORIZONTAL && !!_this.settings.horizontal || _this.axe === SwipeAxes.VERTICAL && !!_this.settings.vertical) {
                    _this.updateSwipe();
                } else if (_this.axe) {
                    _this.swiping = false;
                }
            }
        };
        _this.onTouchEnd = function (e) {
            e.stopPropagation();
            if (!!_this.swiping) {
                _this.endSwipe();
            }
            _this.axe = null;
        };
        _this.settings = $.extend({
            horizontal: true,
            vertical: false,
            minimum: 80,
            disableMouse: false,
            disableTouch: false,
            handler: null
        }, options || {});
        _this.swiping = false;
        _this.$handler = _this.settings.handler ? $(_this.settings.handler) : _this.view;
        _this.updateCursor();
        _this.uid = Utils.generateUID();
        _this.bind();
        return _this;
    }

    _createClass(Swipe, [{
        key: "destroy",
        value: function destroy() {
            _get(Swipe.prototype.__proto__ || Object.getPrototypeOf(Swipe.prototype), "destroy", this).call(this);
            this.unbind();
        }
    }, {
        key: "toggle",
        value: function toggle(enable) {
            this.disabled = !enable;
            this.updateCursor();
        }
    }, {
        key: "end",
        value: function end() {
            if (!!this.swiping) {
                this.endSwipe();
                this.axe = null;
            }
        }
    }, {
        key: "resize",
        value: function resize() {
            var sT = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            this.offsetX = this.view.offset().left;
            this.offsetY = this.view.offset().top - sT;
        }
    }, {
        key: "updateCursor",
        value: function updateCursor() {
            var isMouseDisabled = !Modernizr.touchevents && !!this.settings.disableMouse;
            this.$handler.toggleClass('is-grabbable', !this.disabled && !isMouseDisabled);
        }
    }, {
        key: "bind",
        value: function bind() {
            this.view.off('.swipe');
            if (!this.settings.disableMouse) {
                this.$handler.on('mousedown.swipe', this.onMouseDown);
                this.view.on('mousemove.swipe', this.onMouseMove).on('mouseup.swipe', this.onMouseUp).on('mouseleave.swipe', this.onMouseUp);
            }
            if (!this.settings.disableTouch) {
                this.$handler.on('touchstart.swipe', this.onTouchStart);
                this.view.on('touchmove.swipe', this.onTouchMove);
                Site_1.$doc.off('.swipe' + this.uid).on('touchend.swipe' + this.uid, this.onTouchEnd);
            }
        }
    }, {
        key: "unbind",
        value: function unbind() {
            this.view.off('.swipe');
            Site_1.$doc.off('.swipe' + this.uid);
        }
    }, {
        key: "startSwipe",
        value: function startSwipe() {
            if (!this.disabled) {
                this.swiping = true;
                this.dragged = false;
                this.startX = 0;
                this.startY = 0;
                this.axe = null;
                this.trigger(SwipeEvents.START, {
                    target: this.view[0],
                    x: this.mouse.startX - this.view.offset().left,
                    y: this.mouse.startY - this.view.offset().top,
                    instance: this
                });
                this.$handler.addClass('is-grabbed');
            }
        }
    }, {
        key: "updateSwipe",
        value: function updateSwipe() {
            var x = this.startX + this.mouse.x - this.mouse.startX,
                y = this.startY + this.mouse.y - this.mouse.startY;
            this.x = x;
            this.y = y;
            this.trigger(SwipeEvents.UPDATE, {
                target: this.view[0],
                deltaX: !!this.settings.horizontal ? x : 0,
                deltaY: !!this.settings.vertical ? y : 0,
                x: this.mouse.x,
                y: this.mouse.y,
                instance: this
            });
            this.$handler.addClass('is-dragged');
        }
    }, {
        key: "endSwipe",
        value: function endSwipe() {
            this.swiping = false;
            var direction = this.axe === SwipeAxes.HORIZONTAL ? this.x < this.startX ? SwipeDirections.LEFT : SwipeDirections.RIGHT : this.y < this.startY ? SwipeDirections.UP : SwipeDirections.DOWN;
            direction = this.axe === SwipeAxes.HORIZONTAL && Math.abs(this.mouse.x - this.mouse.startX) < this.settings.minimum ? SwipeDirections.NONE : direction;
            direction = this.axe === SwipeAxes.VERTICAL && Math.abs(this.mouse.y - this.mouse.startY) < this.settings.minimum ? SwipeDirections.NONE : direction;
            direction = this.axe === null ? SwipeDirections.NONE : direction;
            direction = direction === SwipeDirections.NONE && !this.dragged ? SwipeDirections.CLICK : direction;
            this.trigger(SwipeEvents.END, {
                target: this.view[0],
                direction: direction,
                instance: this
            });
            this.$handler.removeClass('is-grabbed is-dragged');
        }
    }]);

    return Swipe;
}(Handler_1.Handler);

exports.Swipe = Swipe;

},{"../Handler":6,"../Site":11,"../Utils":12}],24:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var Component_1 = require("./Component");
var Site_1 = require("../Site");

var Tooltip = function (_Component_1$Componen) {
    _inherits(Tooltip, _Component_1$Componen);

    function Tooltip(view, options) {
        _classCallCheck(this, Tooltip);

        var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, view));

        _this.view = view;
        _this.options = options;
        _this.onMouseEnter = function () {
            if (!_this.isOpen) {
                _this.open();
            }
        };
        _this.onMouseLeave = function () {
            if (_this.isOpen) {
                _this.close();
            }
        };
        _this.onButtonClickHandler = function (e) {
            e.stopPropagation();
            e.preventDefault();
            if (!_this.isOpen) {
                _this.open();
            } else {
                _this.close();
            }
        };
        _this.onClickAnywhereHandler = function (e) {
            if ($(e.target).closest(_this.view).length <= 0) {
                _this.close();
            }
        };
        _this.$button = _this.view.find('.js-toggle');
        _this.$close = _this.view.find('.js-close').length > 0 ? _this.view.find('.js-close') : null;
        _this.bind();
        return _this;
    }

    _createClass(Tooltip, [{
        key: "bind",
        value: function bind() {
            var _this2 = this;

            this.$button.on('click.tooltip', this.onButtonClickHandler);
            this.view.off('mouseon').on('mouseenter.mouseon', this.onMouseEnter).off('mouseoff').on('mouseleave.mouseoff', this.onMouseLeave);
            Site_1.$doc.on('click.tooltip', this.onClickAnywhereHandler);
            if (this.$close) {
                this.$close.on('click.tooltip', function () {
                    return _this2.close();
                });
            }
        }
    }, {
        key: "open",
        value: function open() {
            var _this3 = this;

            this.isOpen = true;
            setTimeout(function () {
                _this3.view.addClass('is-open');
            }, 250);
            if (this.view.closest('.header').length > 0) {
                this.view.closest('.header').addClass('is-toggled-share');
            }
            setTimeout(function () {
                if (_this3.isOpen) {
                    _this3.close();
                }
            }, 3000);
        }
    }, {
        key: "close",
        value: function close() {
            this.isOpen = false;
            this.view.removeClass('is-open');
            if (this.view.closest('.header').length > 0) {
                this.view.closest('.header').removeClass('is-toggled-share');
            }
        }
    }]);

    return Tooltip;
}(Component_1.Component);

exports.Tooltip = Tooltip;

},{"../Site":11,"./Component":15}],25:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var Handler_1 = require("../Handler");
var Component_1 = require("../components/Component");
var Classes_1 = require("../Classes");
var Site_1 = require("../Site");

var PageEvents = function PageEvents() {
    _classCallCheck(this, PageEvents);
};

exports.PageEvents = PageEvents;
PageEvents.PROGRESS = 'progress';
PageEvents.COMPLETE = 'complete';
PageEvents.CHANGE = 'append';

var Page = function (_Handler_1$Handler) {
    _inherits(Page, _Handler_1$Handler);

    function Page(view, options) {
        _classCallCheck(this, Page);

        var _this = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this));

        _this.view = view;
        _this.components = [];
        _this.onComponentChange = function (el) {
            _this.buildComponents(el.filter('[data-component]').add(el.find('[data-component]')));
            _this.trigger(PageEvents.CHANGE, el);
        };
        _this.view.css({ opacity: 0 });
        _this.components = [];
        _this.buildComponents(_this.view.parent().find('[data-component]'));
        return _this;
    }

    _createClass(Page, [{
        key: "preload",
        value: function preload() {
            var _this2 = this;

            var il = imagesLoaded(this.view.find('.preload').toArray(), { background: true });
            var images = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var component = _step.value;

                    images = images.concat(component.preloadImages());
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = images[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var url = _step2.value;

                    il.addBackground(url, null);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return new Promise(function (resolve, reject) {
                _this2.loader = il.jqDeferred;
                _this2.loader.progress(function (instance, image) {
                    var progress = instance.progressedCount / instance.images.length;
                    _this2.trigger(PageEvents.PROGRESS, progress);
                }).always(function () {
                    _this2.trigger(PageEvents.COMPLETE);
                    resolve();
                });
            });
        }
    }, {
        key: "onState",
        value: function onState() {
            var changed = !!false;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.components[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var component = _step3.value;

                    var componentChanged = component.onState();
                    if (!changed && !!componentChanged) {
                        changed = true;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return changed;
        }
    }, {
        key: "animateIn",
        value: function animateIn(delay) {
            var bg = $('#backgrounds-fixed');
            gsap.to(bg, { duration: 0.5, opacity: 1, display: 'block' });
            for (var i = 0; i < this.components.length; ++i) {
                this.components[i].animateIn(i, delay);
            }
            gsap.to(this.view, {
                duration: 0.4,
                opacity: 1,
                onComplete: function onComplete() {
                    gsap.to(bg, { duration: 0.5, opacity: 1, display: 'block' });
                }
            });
        }
    }, {
        key: "animateOut",
        value: function animateOut() {
            var _this3 = this;

            var bg = $('#backgrounds-fixed');
            Site_1.$main.removeClass('is-loaded');
            gsap.set(bg, { opacity: 0, display: 'none' });
            var pageAnimationPromise = new Promise(function (resolve, reject) {
                gsap.to(_this3.view, {
                    duration: 0.4,
                    onComplete: function onComplete() {
                        resolve();
                        Site_1.$body.removeAttr('class');
                    },
                    opacity: 0
                });
            });
            var componentAnimations = this.components.map(function (obj) {
                return obj.animateOut();
            });
            return new Promise(function (resolve, reject) {
                var allPromises = componentAnimations.concat(pageAnimationPromise);
                Promise.all(allPromises).then(function (results) {
                    resolve();
                });
            });
        }
    }, {
        key: "turnOff",
        value: function turnOff() {
            this.callAll('turnOff');
        }
    }, {
        key: "turnOn",
        value: function turnOn() {
            this.callAll('turnOn');
        }
    }, {
        key: "resize",
        value: function resize(wdt, hgt, breakpoint, bpChanged) {
            this.callAll('resize', wdt, hgt, breakpoint, bpChanged);
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.callAll('destroy');
            this.components = [];
            gsap.killTweensOf(this.view);
            this.view = null;
            _get(Page.prototype.__proto__ || Object.getPrototypeOf(Page.prototype), "destroy", this).call(this);
        }
    }, {
        key: "buildComponents",
        value: function buildComponents($components) {
            for (var i = $components.length - 1; i >= 0; i--) {
                var $component = $components.eq(i);
                var componentName = $component.data('component');
                if (componentName !== undefined && Classes_1.components[componentName]) {
                    var options = $component.data('options'),
                        component = new Classes_1.components[componentName]($component, options);
                    this.components.push(component);
                    component.on(Component_1.ComponentEvents.CHANGE, this.onComponentChange);
                } else {
                    window.console.warn('There is no `%s` component!', componentName);
                }
            }
        }
    }, {
        key: "callAll",
        value: function callAll(fn) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.components[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var component = _step4.value;

                    if (typeof component[fn] === 'function') {
                        component[fn].apply(component, [].slice.call(arguments, 1));
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }]);

    return Page;
}(Handler_1.Handler);

exports.Page = Page;

},{"../Classes":4,"../Handler":6,"../Site":11,"../components/Component":15}]},{},[11])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
